
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Sep 02 00:33:17 CST 2011
//----------------------------------------------------

package Parse;

import java_cup.runtime.Scanner;
import Absyn.*;

/** CUP v0.10k generated parser.
  * @version Fri Sep 02 00:33:17 CST 2011
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\005\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\010\000\002" +
    "\005\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\006\000\002\005\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\012\000\002\005\007\000" +
    "\002\022\007\000\002\022\011\000\002\022\007\000\002" +
    "\007\007\000\002\007\006\000\002\007\012\000\002\007" +
    "\011\000\002\043\011\000\002\043\013\000\002\006\005" +
    "\000\002\006\013\000\002\006\013\000\002\006\013\000" +
    "\002\006\013\000\002\006\014\000\002\006\014\000\002" +
    "\006\005\000\002\006\006\000\002\006\005\000\002\006" +
    "\006\000\002\006\005\000\002\006\006\000\002\030\007" +
    "\000\002\030\012\000\002\011\003\000\002\011\005\000" +
    "\002\010\004\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\005\000\002\010\007\000\002\021" +
    "\003\000\002\021\005\000\002\026\003\000\002\026\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\004\000\002\023\003\000\002\023" +
    "\004\000\002\023\003\000\002\023\004\000\002\023\003" +
    "\000\002\035\005\000\002\035\007\000\002\034\003\000" +
    "\002\034\005\000\002\024\003\000\002\024\003\000\002" +
    "\017\003\000\002\017\005\000\002\017\005\000\002\020" +
    "\003\000\002\020\005\000\002\015\003\000\002\015\005" +
    "\000\002\016\003\000\002\016\004\000\002\016\005\000" +
    "\002\016\006\000\002\016\007\000\002\036\003\000\002" +
    "\036\004\000\002\040\003\000\002\040\005\000\002\042" +
    "\003\000\002\042\004\000\002\037\003\000\002\037\005" +
    "\000\002\041\003\000\002\041\004\000\002\033\003\000" +
    "\002\033\005\000\002\032\003\000\002\032\004\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\004\000\002\013\005\000\002\014\005" +
    "\000\002\014\007\000\002\014\007\000\002\014\011\000" +
    "\002\014\010\000\002\014\010\000\002\014\007\000\002" +
    "\014\010\000\002\014\005\000\002\014\006\000\002\014" +
    "\007\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\027\007\000\002\027\007\000\002\027" +
    "\007\000\002\027\007\000\002\027\007\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\006\000\002\012" +
    "\006\000\002\012\010\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\044\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\032\002\uff6b\015\uff6b\016\012\033\015\034" +
    "\020\035\017\040\023\041\007\045\006\046\016\047\025" +
    "\051\024\001\002\000\004\015\ufff3\001\002\000\004\015" +
    "\ufff4\001\002\000\056\004\uff6b\005\uff6b\006\uff6b\007\uff6b" +
    "\010\uff6b\011\uff6b\012\uff6b\016\uff6b\020\uff6b\102\101\105" +
    "\uff6b\106\uff6b\107\uff6b\110\uff6b\117\uff6b\120\uff6b\121\uff6b" +
    "\122\uff6b\123\uff6b\132\uff6b\133\uff6b\134\uff6b\001\002\000" +
    "\006\042\u0129\043\u012a\001\002\000\004\015\uffef\001\002" +
    "\000\012\015\ufff0\063\133\064\132\065\131\001\002\000" +
    "\006\016\012\045\006\001\002\000\004\015\ufff2\001\002" +
    "\000\006\002\uffff\015\ufffc\001\002\000\012\037\u0113\042" +
    "\u0114\043\u0115\044\u0112\001\002\000\004\116\377\001\002" +
    "\000\004\042\322\001\002\000\012\037\306\042\310\043" +
    "\307\044\305\001\002\000\004\002\000\001\002\000\004" +
    "\015\302\001\002\000\004\004\301\001\002\000\004\056" +
    "\276\001\002\000\004\004\030\001\002\000\004\002\027" +
    "\001\002\000\004\002\001\001\002\000\006\050\032\113" +
    "\031\001\002\000\004\004\270\001\002\000\004\004\033" +
    "\001\002\000\076\013\266\014\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\056\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\077\uffc9\100\uffc9\112\uffc9\113\uffc9\114\uffc9\001" +
    "\002\000\004\021\035\001\002\000\034\005\045\006\043" +
    "\007\053\010\044\011\046\012\050\105\042\106\041\107" +
    "\047\110\051\132\037\133\036\134\052\001\002\000\004" +
    "\007\265\001\002\000\004\006\264\001\002\000\006\015" +
    "\uff6b\057\055\001\002\000\076\014\uffc5\015\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\112\uffc5\113\uffc5" +
    "\114\uffc5\001\002\000\076\014\uffc3\015\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\112\uffc3\113\uffc3\114" +
    "\uffc3\001\002\000\076\014\uffbf\015\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\112\uffbf\113\uffbf\114\uffbf" +
    "\001\002\000\076\014\uffbb\015\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\074\uffbb\075\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\112\uffbb\113\uffbb\114\uffbb\001" +
    "\002\000\076\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\074\uffc6\075\uffc6\076" +
    "\uffc6\077\uffc6\100\uffc6\112\uffc6\113\uffc6\114\uffc6\001\002" +
    "\000\076\014\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\077\uffc7\100\uffc7\112\uffc7\113\uffc7\114\uffc7\001\002\000" +
    "\076\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\112\uffc4\113\uffc4\114\uffc4\001\002\000\076" +
    "\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\112\uffc1\113\uffc1\114\uffc1\001\002\000\076\014" +
    "\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\112\uffc2\113\uffc2\114\uffc2\001\002\000\004\010\054" +
    "\001\002\000\076\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\056\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\074\uffbd\075\uffbd" +
    "\076\uffbd\077\uffbd\100\uffbd\112\uffbd\113\uffbd\114\uffbd\001" +
    "\002\000\076\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\064\uffbc\065\uffbc\074\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\100\uffbc\112\uffbc\113\uffbc\114\uffbc\001\002" +
    "\000\056\004\033\005\045\006\043\007\053\010\044\011" +
    "\046\012\050\016\070\020\063\100\064\105\042\106\041" +
    "\107\047\110\051\117\076\120\062\121\071\122\073\123" +
    "\074\132\037\133\036\134\052\001\002\000\004\015\uffe4" +
    "\001\002\000\022\015\uffa8\017\uffa8\060\uffa8\061\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\074\uffa8\001\002\000\014\014\256" +
    "\017\uffb4\056\uffb4\100\uffb4\112\uffb4\001\002\000\074\014" +
    "\uff86\015\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032" +
    "\uff86\056\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\112" +
    "\uff86\113\uff86\114\uff86\001\002\000\004\016\252\001\002" +
    "\000\074\014\uff88\015\uff88\017\uff88\020\uff88\021\uff88\022" +
    "\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88" +
    "\031\uff88\032\uff88\056\uff88\060\uff88\061\uff88\062\uff88\063" +
    "\uff88\064\uff88\065\uff88\074\uff88\075\uff88\076\uff88\077\uff88" +
    "\100\uff88\112\uff88\113\uff88\114\uff88\001\002\000\056\004" +
    "\033\005\045\006\043\007\053\010\044\011\046\012\050" +
    "\016\070\020\063\100\064\105\042\106\041\107\047\110" +
    "\051\117\076\120\062\121\071\122\073\123\074\132\037" +
    "\133\036\134\052\001\002\000\074\014\uff87\015\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\056\uff87\060" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\074\uff87" +
    "\075\uff87\076\uff87\077\uff87\100\uff87\112\uff87\113\uff87\114" +
    "\uff87\001\002\000\030\015\uffa7\017\uffa7\032\243\060\uffa7" +
    "\061\uffa7\063\uffa7\064\uffa7\065\uffa7\074\uffa7\076\242\077" +
    "\244\001\002\000\044\014\uffb1\020\107\021\175\022\201" +
    "\023\174\024\177\025\176\026\200\027\111\030\113\031" +
    "\114\032\112\075\213\100\uffb1\112\uffb1\113\214\114\215" +
    "\001\002\000\060\004\033\005\045\006\043\007\053\010" +
    "\044\011\046\012\050\016\167\020\063\045\006\100\064" +
    "\105\042\106\041\107\047\110\051\117\076\120\062\121" +
    "\071\122\073\123\074\132\037\133\036\134\052\001\002" +
    "\000\004\016\160\001\002\000\030\015\uff9a\017\uff9a\032" +
    "\uff9a\060\uff9a\061\uff9a\063\uff9a\064\uff9a\065\uff9a\074\uff9a" +
    "\076\uff9a\077\uff9a\001\002\000\004\016\154\001\002\000" +
    "\004\016\150\001\002\000\006\100\124\112\123\001\002" +
    "\000\004\016\100\001\002\000\074\014\uff89\015\uff89\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\056\uff89\060" +
    "\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\074\uff89" +
    "\075\uff89\076\uff89\077\uff89\100\uff89\112\uff89\113\uff89\114" +
    "\uff89\001\002\000\056\004\uff6b\005\uff6b\006\uff6b\007\uff6b" +
    "\010\uff6b\011\uff6b\012\uff6b\016\uff6b\020\uff6b\102\101\105" +
    "\uff6b\106\uff6b\107\uff6b\110\uff6b\117\uff6b\120\uff6b\121\uff6b" +
    "\122\uff6b\123\uff6b\132\uff6b\133\uff6b\134\uff6b\001\002\000" +
    "\054\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\016\uffb5\020\uffb5\105\uffb5\106\uffb5\107\uffb5\110" +
    "\uffb5\117\uffb5\120\uffb5\121\uffb5\122\uffb5\123\uffb5\132\uffb5" +
    "\133\uffb5\134\uffb5\001\002\000\054\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\016\uffb6\020\uffb6" +
    "\105\uffb6\106\uffb6\107\uffb6\110\uffb6\117\uffb6\120\uffb6\121" +
    "\uffb6\122\uffb6\123\uffb6\132\uffb6\133\uffb6\134\uffb6\001\002" +
    "\000\054\004\033\005\045\006\043\007\053\010\044\011" +
    "\046\012\050\016\105\020\063\105\042\106\041\107\047" +
    "\110\051\117\076\120\062\121\071\122\073\123\074\132" +
    "\037\133\036\134\052\001\002\000\016\017\122\020\107" +
    "\027\111\030\113\031\114\032\112\001\002\000\054\004" +
    "\033\005\045\006\043\007\053\010\044\011\046\012\050" +
    "\016\105\020\063\105\042\106\041\107\047\110\051\117" +
    "\076\120\062\121\071\122\073\123\074\132\037\133\036" +
    "\134\052\001\002\000\016\017\110\020\107\027\111\030" +
    "\113\031\114\032\112\001\002\000\054\004\033\005\045" +
    "\006\043\007\053\010\044\011\046\012\050\016\105\020" +
    "\063\105\042\106\041\107\047\110\051\117\076\120\062" +
    "\121\071\122\073\123\074\132\037\133\036\134\052\001" +
    "\002\000\074\014\uff80\015\uff80\017\uff80\020\uff80\021\uff80" +
    "\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030" +
    "\uff80\031\uff80\032\uff80\056\uff80\060\uff80\061\uff80\062\uff80" +
    "\063\uff80\064\uff80\065\uff80\074\uff80\075\uff80\076\uff80\077" +
    "\uff80\100\uff80\112\uff80\113\uff80\114\uff80\001\002\000\054" +
    "\004\033\005\045\006\043\007\053\010\044\011\046\012" +
    "\050\016\105\020\063\105\042\106\041\107\047\110\051" +
    "\117\076\120\062\121\071\122\073\123\074\132\037\133" +
    "\036\134\052\001\002\000\054\004\033\005\045\006\043" +
    "\007\053\010\044\011\046\012\050\016\105\020\063\105" +
    "\042\106\041\107\047\110\051\117\076\120\062\121\071" +
    "\122\073\123\074\132\037\133\036\134\052\001\002\000" +
    "\054\004\033\005\045\006\043\007\053\010\044\011\046" +
    "\012\050\016\105\020\063\105\042\106\041\107\047\110" +
    "\051\117\076\120\062\121\071\122\073\123\074\132\037" +
    "\133\036\134\052\001\002\000\054\004\033\005\045\006" +
    "\043\007\053\010\044\011\046\012\050\016\105\020\063" +
    "\105\042\106\041\107\047\110\051\117\076\120\062\121" +
    "\071\122\073\123\074\132\037\133\036\134\052\001\002" +
    "\000\074\014\uff82\015\uff82\017\uff82\020\uff82\021\uff82\022" +
    "\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82" +
    "\031\uff82\032\uff82\056\uff82\060\uff82\061\uff82\062\uff82\063" +
    "\uff82\064\uff82\065\uff82\074\uff82\075\uff82\076\uff82\077\uff82" +
    "\100\uff82\112\uff82\113\uff82\114\uff82\001\002\000\074\014" +
    "\uff84\015\uff84\017\uff84\020\107\021\uff84\022\uff84\023\uff84" +
    "\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\114\032" +
    "\uff84\056\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\112" +
    "\uff84\113\uff84\114\uff84\001\002\000\074\014\uff81\015\uff81" +
    "\017\uff81\020\107\021\uff81\022\uff81\023\uff81\024\uff81\025" +
    "\uff81\026\uff81\027\111\030\113\031\114\032\uff81\056\uff81" +
    "\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\074" +
    "\uff81\075\uff81\076\uff81\077\uff81\100\uff81\112\uff81\113\uff81" +
    "\114\uff81\001\002\000\074\014\uff85\015\uff85\017\uff85\020" +
    "\107\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\114\032\uff85\056\uff85\060\uff85\061" +
    "\uff85\062\uff85\063\uff85\064\uff85\065\uff85\074\uff85\075\uff85" +
    "\076\uff85\077\uff85\100\uff85\112\uff85\113\uff85\114\uff85\001" +
    "\002\000\074\014\uff83\015\uff83\017\uff83\020\uff83\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030" +
    "\uff83\031\uff83\032\uff83\056\uff83\060\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\065\uff83\074\uff83\075\uff83\076\uff83\077" +
    "\uff83\100\uff83\112\uff83\113\uff83\114\uff83\001\002\000\074" +
    "\014\uff7d\015\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d" +
    "\032\uff7d\056\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\065\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d" +
    "\112\uff7d\113\uff7d\114\uff7d\001\002\000\004\016\145\001" +
    "\002\000\004\112\125\001\002\000\004\016\126\001\002" +
    "\000\006\016\012\045\006\001\002\000\012\017\130\063" +
    "\133\064\132\065\131\001\002\000\030\015\uff8d\017\uff8d" +
    "\032\uff8d\060\uff8d\061\uff8d\063\uff8d\064\uff8d\065\uff8d\074" +
    "\uff8d\076\uff8d\077\uff8d\001\002\000\010\016\012\045\006" +
    "\104\142\001\002\000\010\016\012\045\006\104\137\001" +
    "\002\000\010\016\012\045\006\104\134\001\002\000\006" +
    "\016\012\045\006\001\002\000\014\015\uffdb\017\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\001\002\000\014\015\uffda\017\uffda" +
    "\063\133\064\132\065\131\001\002\000\006\016\012\045" +
    "\006\001\002\000\014\015\uffd9\017\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\001\002\000\014\015\uffd8\017\uffd8\063\133\064" +
    "\132\065\131\001\002\000\006\016\012\045\006\001\002" +
    "\000\014\015\uffd7\017\uffd7\063\uffd7\064\uffd7\065\uffd7\001" +
    "\002\000\014\015\uffd6\017\uffd6\063\133\064\132\065\131" +
    "\001\002\000\006\016\012\045\006\001\002\000\012\017" +
    "\147\063\133\064\132\065\131\001\002\000\030\015\uff8e" +
    "\017\uff8e\032\uff8e\060\uff8e\061\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\074\uff8e\076\uff8e\077\uff8e\001\002\000\056\004\uff6b" +
    "\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\016" +
    "\uff6b\020\uff6b\102\101\105\uff6b\106\uff6b\107\uff6b\110\uff6b" +
    "\117\uff6b\120\uff6b\121\uff6b\122\uff6b\123\uff6b\132\uff6b\133" +
    "\uff6b\134\uff6b\001\002\000\054\004\033\005\045\006\043" +
    "\007\053\010\044\011\046\012\050\016\105\020\063\105" +
    "\042\106\041\107\047\110\051\117\076\120\062\121\071" +
    "\122\073\123\074\132\037\133\036\134\052\001\002\000" +
    "\016\017\153\020\107\027\111\030\113\031\114\032\112" +
    "\001\002\000\074\014\uff7b\015\uff7b\017\uff7b\020\uff7b\021" +
    "\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b" +
    "\030\uff7b\031\uff7b\032\uff7b\056\uff7b\060\uff7b\061\uff7b\062" +
    "\uff7b\063\uff7b\064\uff7b\065\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\100\uff7b\112\uff7b\113\uff7b\114\uff7b\001\002\000" +
    "\056\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b" +
    "\012\uff6b\016\uff6b\020\uff6b\102\101\105\uff6b\106\uff6b\107" +
    "\uff6b\110\uff6b\117\uff6b\120\uff6b\121\uff6b\122\uff6b\123\uff6b" +
    "\132\uff6b\133\uff6b\134\uff6b\001\002\000\054\004\033\005" +
    "\045\006\043\007\053\010\044\011\046\012\050\016\105" +
    "\020\063\105\042\106\041\107\047\110\051\117\076\120" +
    "\062\121\071\122\073\123\074\132\037\133\036\134\052" +
    "\001\002\000\016\017\157\020\107\027\111\030\113\031" +
    "\114\032\112\001\002\000\074\014\uff7c\015\uff7c\017\uff7c" +
    "\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\056\uff7c\060\uff7c" +
    "\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\074\uff7c\075" +
    "\uff7c\076\uff7c\077\uff7c\100\uff7c\112\uff7c\113\uff7c\114\uff7c" +
    "\001\002\000\056\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010" +
    "\uff6b\011\uff6b\012\uff6b\016\uff6b\020\uff6b\102\101\105\uff6b" +
    "\106\uff6b\107\uff6b\110\uff6b\117\uff6b\120\uff6b\121\uff6b\122" +
    "\uff6b\123\uff6b\132\uff6b\133\uff6b\134\uff6b\001\002\000\054" +
    "\004\033\005\045\006\043\007\053\010\044\011\046\012" +
    "\050\016\105\020\063\105\042\106\041\107\047\110\051" +
    "\117\076\120\062\121\071\122\073\123\074\132\037\133" +
    "\036\134\052\001\002\000\016\017\163\020\107\027\111" +
    "\030\113\031\114\032\112\001\002\000\074\014\uff7f\015" +
    "\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\056" +
    "\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f" +
    "\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\112\uff7f\113" +
    "\uff7f\114\uff7f\001\002\000\012\017\250\063\133\064\132" +
    "\065\131\001\002\000\012\017\241\032\243\076\242\077" +
    "\244\001\002\000\046\014\uffb1\017\110\020\107\021\175" +
    "\022\201\023\174\024\177\025\176\026\200\027\111\030" +
    "\113\031\114\032\112\075\213\100\uffb1\112\uffb1\113\214" +
    "\114\215\001\002\000\060\004\033\005\045\006\043\007" +
    "\053\010\044\011\046\012\050\016\167\020\063\045\006" +
    "\100\064\105\042\106\041\107\047\110\051\117\076\120" +
    "\062\121\071\122\073\123\074\132\037\133\036\134\052" +
    "\001\002\000\010\017\171\100\124\112\123\001\002\000" +
    "\012\017\uffb2\056\uffb2\100\uffb2\112\uffb2\001\002\000\012" +
    "\017\173\063\133\064\132\065\131\001\002\000\026\017" +
    "\uffe2\021\175\022\201\023\174\024\177\025\176\026\200" +
    "\063\uffe2\064\uffe2\065\uffe2\001\002\000\060\004\uff76\005" +
    "\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\016\uff76" +
    "\020\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107\uff76\110" +
    "\uff76\117\uff76\120\uff76\121\uff76\122\uff76\123\uff76\132\uff76" +
    "\133\uff76\134\uff76\001\002\000\060\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\016\uff7a\020\uff7a" +
    "\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\110\uff7a\117" +
    "\uff7a\120\uff7a\121\uff7a\122\uff7a\123\uff7a\132\uff7a\133\uff7a" +
    "\134\uff7a\001\002\000\060\004\uff78\005\uff78\006\uff78\007" +
    "\uff78\010\uff78\011\uff78\012\uff78\016\uff78\020\uff78\103\uff78" +
    "\104\uff78\105\uff78\106\uff78\107\uff78\110\uff78\117\uff78\120" +
    "\uff78\121\uff78\122\uff78\123\uff78\132\uff78\133\uff78\134\uff78" +
    "\001\002\000\060\004\uff75\005\uff75\006\uff75\007\uff75\010" +
    "\uff75\011\uff75\012\uff75\016\uff75\020\uff75\103\uff75\104\uff75" +
    "\105\uff75\106\uff75\107\uff75\110\uff75\117\uff75\120\uff75\121" +
    "\uff75\122\uff75\123\uff75\132\uff75\133\uff75\134\uff75\001\002" +
    "\000\060\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011" +
    "\uff77\012\uff77\016\uff77\020\uff77\103\uff77\104\uff77\105\uff77" +
    "\106\uff77\107\uff77\110\uff77\117\uff77\120\uff77\121\uff77\122" +
    "\uff77\123\uff77\132\uff77\133\uff77\134\uff77\001\002\000\060" +
    "\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012" +
    "\uff79\016\uff79\020\uff79\103\uff79\104\uff79\105\uff79\106\uff79" +
    "\107\uff79\110\uff79\117\uff79\120\uff79\121\uff79\122\uff79\123" +
    "\uff79\132\uff79\133\uff79\134\uff79\001\002\000\054\004\033" +
    "\005\045\006\043\007\053\010\044\011\046\012\050\016" +
    "\204\020\063\105\042\106\041\107\047\110\051\117\076" +
    "\120\062\121\071\122\073\123\074\132\037\133\036\134" +
    "\052\001\002\000\040\015\uff92\017\uff92\020\107\027\111" +
    "\030\113\031\114\032\uff92\060\uff92\061\uff92\063\uff92\064" +
    "\uff92\065\uff92\074\uff92\076\uff92\077\uff92\001\002\000\056" +
    "\004\033\005\045\006\043\007\053\010\044\011\046\012" +
    "\050\016\206\020\063\045\006\105\042\106\041\107\047" +
    "\110\051\117\076\120\062\121\071\122\073\123\074\132" +
    "\037\133\036\134\052\001\002\000\012\017\211\063\133" +
    "\064\132\065\131\001\002\000\056\004\033\005\045\006" +
    "\043\007\053\010\044\011\046\012\050\016\206\020\063" +
    "\045\006\105\042\106\041\107\047\110\051\117\076\120" +
    "\062\121\071\122\073\123\074\132\037\133\036\134\052" +
    "\001\002\000\012\017\210\063\133\064\132\065\131\001" +
    "\002\000\014\015\uffe2\017\uffe2\063\uffe2\064\uffe2\065\uffe2" +
    "\001\002\000\030\015\uff91\017\uff91\032\uff91\060\uff91\061" +
    "\uff91\063\uff91\064\uff91\065\uff91\074\uff91\076\uff91\077\uff91" +
    "\001\002\000\060\004\033\005\045\006\043\007\053\010" +
    "\044\011\046\012\050\016\227\020\063\103\230\104\225" +
    "\105\042\106\041\107\047\110\051\117\076\120\062\121" +
    "\071\122\073\123\074\132\037\133\036\134\052\001\002" +
    "\000\054\004\033\005\045\006\043\007\053\010\044\011" +
    "\046\012\050\016\105\020\063\105\042\106\041\107\047" +
    "\110\051\117\076\120\062\121\071\122\073\123\074\132" +
    "\037\133\036\134\052\001\002\000\004\004\221\001\002" +
    "\000\006\100\216\105\217\001\002\000\004\105\220\001" +
    "\002\000\030\015\uff8c\017\uff8c\032\uff8c\060\uff8c\061\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\074\uff8c\076\uff8c\077\uff8c\001" +
    "\002\000\030\015\uff8b\017\uff8b\032\uff8b\060\uff8b\061\uff8b" +
    "\063\uff8b\064\uff8b\065\uff8b\074\uff8b\076\uff8b\077\uff8b\001" +
    "\002\000\014\014\uffb0\017\uffb0\056\uffb0\100\uffb0\112\uffb0" +
    "\001\002\000\016\020\107\027\111\030\113\031\114\032" +
    "\112\076\223\001\002\000\054\004\033\005\045\006\043" +
    "\007\053\010\044\011\046\012\050\016\105\020\063\105" +
    "\042\106\041\107\047\110\051\117\076\120\062\121\071" +
    "\122\073\123\074\132\037\133\036\134\052\001\002\000" +
    "\040\015\uff8a\017\uff8a\020\107\027\111\030\113\031\114" +
    "\032\112\060\uff8a\061\uff8a\063\uff8a\064\uff8a\065\uff8a\074" +
    "\uff8a\076\uff8a\077\uff8a\001\002\000\004\016\236\001\002" +
    "\000\040\015\uff94\017\uff94\020\107\027\111\030\113\031" +
    "\114\032\112\060\uff94\061\uff94\063\uff94\064\uff94\065\uff94" +
    "\074\uff94\076\uff94\077\uff94\001\002\000\056\004\033\005" +
    "\045\006\043\007\053\010\044\011\046\012\050\016\206" +
    "\020\063\045\006\105\042\106\041\107\047\110\051\117" +
    "\076\120\062\121\071\122\073\123\074\132\037\133\036" +
    "\134\052\001\002\000\004\016\231\001\002\000\006\016" +
    "\012\045\006\001\002\000\012\017\233\063\133\064\132" +
    "\065\131\001\002\000\030\015\uff90\017\uff90\032\uff90\060" +
    "\uff90\061\uff90\063\uff90\064\uff90\065\uff90\074\uff90\076\uff90" +
    "\077\uff90\001\002\000\012\017\235\063\133\064\132\065" +
    "\131\001\002\000\030\015\uff93\017\uff93\032\uff93\060\uff93" +
    "\061\uff93\063\uff93\064\uff93\065\uff93\074\uff93\076\uff93\077" +
    "\uff93\001\002\000\006\016\012\045\006\001\002\000\012" +
    "\017\240\063\133\064\132\065\131\001\002\000\030\015" +
    "\uff8f\017\uff8f\032\uff8f\060\uff8f\061\uff8f\063\uff8f\064\uff8f" +
    "\065\uff8f\074\uff8f\076\uff8f\077\uff8f\001\002\000\030\015" +
    "\uff95\017\uff95\032\uff95\060\uff95\061\uff95\063\uff95\064\uff95" +
    "\065\uff95\074\uff95\076\uff95\077\uff95\001\002\000\056\004" +
    "\033\005\045\006\043\007\053\010\044\011\046\012\050" +
    "\016\070\020\063\100\064\105\042\106\041\107\047\110" +
    "\051\117\076\120\062\121\071\122\073\123\074\132\037" +
    "\133\036\134\052\001\002\000\056\004\033\005\045\006" +
    "\043\007\053\010\044\011\046\012\050\016\070\020\063" +
    "\100\064\105\042\106\041\107\047\110\051\117\076\120" +
    "\062\121\071\122\073\123\074\132\037\133\036\134\052" +
    "\001\002\000\056\004\033\005\045\006\043\007\053\010" +
    "\044\011\046\012\050\016\070\020\063\100\064\105\042" +
    "\106\041\107\047\110\051\117\076\120\062\121\071\122" +
    "\073\123\074\132\037\133\036\134\052\001\002\000\030" +
    "\015\uff98\017\uff98\032\243\060\uff98\061\uff98\063\uff98\064" +
    "\uff98\065\uff98\074\uff98\076\242\077\uff98\001\002\000\030" +
    "\015\uff97\017\uff97\032\uff97\060\uff97\061\uff97\063\uff97\064" +
    "\uff97\065\uff97\074\uff97\076\uff97\077\uff97\001\002\000\030" +
    "\015\uff99\017\uff99\032\243\060\uff99\061\uff99\063\uff99\064" +
    "\uff99\065\uff99\074\uff99\076\uff99\077\uff99\001\002\000\016" +
    "\021\175\022\201\023\174\024\177\025\176\026\200\001" +
    "\002\000\030\015\uff96\017\uff96\032\243\060\uff96\061\uff96" +
    "\063\uff96\064\uff96\065\uff96\074\uff96\076\242\077\244\001" +
    "\002\000\056\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b" +
    "\011\uff6b\012\uff6b\016\uff6b\020\uff6b\102\101\105\uff6b\106" +
    "\uff6b\107\uff6b\110\uff6b\117\uff6b\120\uff6b\121\uff6b\122\uff6b" +
    "\123\uff6b\132\uff6b\133\uff6b\134\uff6b\001\002\000\054\004" +
    "\033\005\045\006\043\007\053\010\044\011\046\012\050" +
    "\016\105\020\063\105\042\106\041\107\047\110\051\117" +
    "\076\120\062\121\071\122\073\123\074\132\037\133\036" +
    "\134\052\001\002\000\016\017\255\020\107\027\111\030" +
    "\113\031\114\032\112\001\002\000\074\014\uff7e\015\uff7e" +
    "\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\056\uff7e" +
    "\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\074" +
    "\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\112\uff7e\113\uff7e" +
    "\114\uff7e\001\002\000\054\004\033\005\045\006\043\007" +
    "\053\010\044\011\046\012\050\016\260\020\063\105\042" +
    "\106\041\107\047\110\051\117\076\120\062\121\071\122" +
    "\073\123\074\132\037\133\036\134\052\001\002\000\030" +
    "\014\uffb1\017\uffb1\020\107\027\111\030\113\031\114\032" +
    "\112\056\uffb1\100\uffb1\112\uffb1\113\214\001\002\000\054" +
    "\004\033\005\045\006\043\007\053\010\044\011\046\012" +
    "\050\016\260\020\063\105\042\106\041\107\047\110\051" +
    "\117\076\120\062\121\071\122\073\123\074\132\037\133" +
    "\036\134\052\001\002\000\012\017\uffb3\056\uffb3\100\uffb3" +
    "\112\uffb3\001\002\000\022\014\uffb1\017\110\020\107\027" +
    "\111\030\113\031\114\032\112\113\214\001\002\000\004" +
    "\017\171\001\002\000\076\014\uffc0\015\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\100\uffc0\112\uffc0\113\uffc0\114" +
    "\uffc0\001\002\000\076\014\uffbe\015\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\100\uffbe\112\uffbe\113\uffbe\114\uffbe" +
    "\001\002\000\004\004\267\001\002\000\074\014\uffc8\015" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\056" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\112\uffc8\113" +
    "\uffc8\114\uffc8\001\002\000\004\050\271\001\002\000\004" +
    "\004\033\001\002\000\004\021\273\001\002\000\034\005" +
    "\045\006\043\007\053\010\044\011\046\012\050\105\042" +
    "\106\041\107\047\110\051\132\037\133\036\134\052\001" +
    "\002\000\006\015\uff6b\057\055\001\002\000\004\015\uffe3" +
    "\001\002\000\004\004\277\001\002\000\006\015\uff6b\057" +
    "\055\001\002\000\004\015\ufff1\001\002\000\004\015\ufff9" +
    "\001\002\000\032\002\ufffe\015\uff6b\016\012\033\015\034" +
    "\020\035\017\040\023\041\007\045\006\046\016\047\025" +
    "\051\024\001\002\000\004\015\ufffc\001\002\000\004\002" +
    "\ufffd\001\002\000\004\004\317\001\002\000\004\004\316" +
    "\001\002\000\004\004\033\001\002\000\004\004\033\001" +
    "\002\000\022\014\313\015\uffcb\017\uffcb\061\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\074\uffcb\001\002\000\004\015\ufff5\001" +
    "\002\000\004\004\033\001\002\000\020\015\uffca\017\uffca" +
    "\061\uffca\063\uffca\064\uffca\065\uffca\074\uffca\001\002\000" +
    "\004\015\uffee\001\002\000\004\015\ufffa\001\002\000\004" +
    "\111\320\001\002\000\004\004\321\001\002\000\004\015" +
    "\uffec\001\002\000\004\004\323\001\002\000\006\034\325" +
    "\036\324\001\002\000\010\004\330\016\332\052\331\001" +
    "\002\000\004\004\033\001\002\000\004\015\uffe9\001\002" +
    "\000\004\015\uffeb\001\002\000\022\124\350\125\344\126" +
    "\354\127\351\130\345\131\352\132\346\133\347\001\002" +
    "\000\004\053\340\001\002\000\006\004\330\052\331\001" +
    "\002\000\006\014\336\017\uffd3\001\002\000\004\017\335" +
    "\001\002\000\004\015\uffea\001\002\000\006\004\330\052" +
    "\331\001\002\000\004\017\uffd2\001\002\000\004\016\341" +
    "\001\002\000\004\004\033\001\002\000\004\017\343\001" +
    "\002\000\010\014\uffcc\015\uffcc\017\uffcc\001\002\000\020" +
    "\014\uff73\015\uff73\017\uff73\052\uff73\054\uff73\055\uff73\100" +
    "\uff73\001\002\000\004\016\372\001\002\000\020\014\uff6d" +
    "\015\uff6d\017\uff6d\052\uff6d\054\uff6d\055\uff6d\100\uff6d\001" +
    "\002\000\020\014\uff6c\015\uff6c\017\uff6c\052\uff6c\054\uff6c" +
    "\055\uff6c\100\uff6c\001\002\000\020\014\uff74\015\uff74\017" +
    "\uff74\052\uff74\054\uff74\055\uff74\100\uff74\001\002\000\004" +
    "\016\367\001\002\000\020\014\uff6e\015\uff6e\017\uff6e\052" +
    "\uff6e\054\uff6e\055\uff6e\100\uff6e\001\002\000\020\014\uffd1" +
    "\015\uffd1\017\uffd1\052\361\054\363\055\360\100\362\001" +
    "\002\000\022\014\uff72\015\uff72\016\355\017\uff72\052\uff72" +
    "\054\uff72\055\uff72\100\uff72\001\002\000\004\011\356\001" +
    "\002\000\004\017\357\001\002\000\020\014\uff71\015\uff71" +
    "\017\uff71\052\uff71\054\uff71\055\uff71\100\uff71\001\002\000" +
    "\034\005\045\006\043\007\053\010\044\011\046\012\050" +
    "\105\042\106\041\107\047\110\051\132\037\133\036\134" +
    "\052\001\002\000\004\053\365\001\002\000\004\105\364" +
    "\001\002\000\010\014\uffcd\015\uffcd\017\uffcd\001\002\000" +
    "\010\014\uffd0\015\uffd0\017\uffd0\001\002\000\010\014\uffce" +
    "\015\uffce\017\uffce\001\002\000\010\014\uffcf\015\uffcf\017" +
    "\uffcf\001\002\000\004\011\370\001\002\000\004\017\371" +
    "\001\002\000\020\014\uff70\015\uff70\017\uff70\052\uff70\054" +
    "\uff70\055\uff70\100\uff70\001\002\000\004\011\373\001\002" +
    "\000\004\014\374\001\002\000\004\011\375\001\002\000" +
    "\004\017\376\001\002\000\020\014\uff6f\015\uff6f\017\uff6f" +
    "\052\uff6f\054\uff6f\055\uff6f\100\uff6f\001\002\000\004\004" +
    "\u0100\001\002\000\010\016\u0103\045\006\101\u0101\001\002" +
    "\000\004\016\u0108\001\002\000\012\015\uffe7\063\133\064" +
    "\132\065\131\001\002\000\010\004\033\016\012\045\006" +
    "\001\002\000\004\017\u0105\001\002\000\010\016\012\045" +
    "\006\101\u0106\001\002\000\004\016\u0108\001\002\000\012" +
    "\015\uffe5\063\133\064\132\065\131\001\002\000\034\005" +
    "\045\006\043\007\053\010\044\011\046\012\050\105\042" +
    "\106\041\107\047\110\051\132\037\133\036\134\052\001" +
    "\002\000\004\015\uffe6\001\002\000\006\014\u010f\017\uffb8" +
    "\001\002\000\004\017\u010c\001\002\000\006\014\u010d\015" +
    "\uffba\001\002\000\004\016\u0108\001\002\000\004\015\uffb9" +
    "\001\002\000\034\005\045\006\043\007\053\010\044\011" +
    "\046\012\050\105\042\106\041\107\047\110\051\132\037" +
    "\133\036\134\052\001\002\000\004\017\uffb7\001\002\000" +
    "\004\015\uffe8\001\002\000\004\004\u0123\001\002\000\004" +
    "\004\u0122\001\002\000\004\004\u011e\001\002\000\004\004" +
    "\u0116\001\002\000\006\016\u0118\113\u0117\001\002\000\006" +
    "\016\012\045\006\001\002\000\004\004\033\001\002\000" +
    "\004\017\u011a\001\002\000\004\113\u011b\001\002\000\006" +
    "\016\012\045\006\001\002\000\012\015\uffd4\063\133\064" +
    "\132\065\131\001\002\000\012\015\uffd5\063\133\064\132" +
    "\065\131\001\002\000\004\016\u011f\001\002\000\006\004" +
    "\330\052\331\001\002\000\004\017\u0121\001\002\000\004" +
    "\015\ufff6\001\002\000\004\015\ufffb\001\002\000\004\111" +
    "\u0124\001\002\000\004\004\u0125\001\002\000\004\016\u0126" +
    "\001\002\000\004\004\033\001\002\000\004\017\u0128\001" +
    "\002\000\004\015\uffed\001\002\000\004\015\ufff8\001\002" +
    "\000\004\015\ufff7\001\002\000\054\004\033\005\045\006" +
    "\043\007\053\010\044\011\046\012\050\016\260\020\063" +
    "\105\042\106\041\107\047\110\051\117\076\120\062\121" +
    "\071\122\073\123\074\132\037\133\036\134\052\001\002" +
    "\000\004\056\u012d\001\002\000\006\004\u012e\016\u0131\001" +
    "\002\000\040\004\u013a\014\uffad\015\uffad\017\uffad\057\uffad" +
    "\060\uffad\061\uffad\063\uffad\064\uffad\065\uffad\067\u0152\070" +
    "\u0153\071\u0151\074\uffad\113\u013b\001\002\000\024\015\uff6b" +
    "\017\uff6b\057\055\060\uff6b\061\uff6b\063\uff6b\064\uff6b\065" +
    "\uff6b\074\uff6b\001\002\000\026\014\u0137\015\uffaf\017\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf\074" +
    "\uffaf\001\002\000\006\016\012\045\006\001\002\000\012" +
    "\017\u0133\063\133\064\132\065\131\001\002\000\006\004" +
    "\u0134\113\u0135\001\002\000\026\014\uffaa\015\uffaa\017\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\065\uffaa\074" +
    "\uffaa\001\002\000\004\004\u0136\001\002\000\026\014\uffa9" +
    "\015\uffa9\017\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9\064" +
    "\uffa9\065\uffa9\074\uffa9\001\002\000\006\004\u0138\016\u0131" +
    "\001\002\000\032\004\u013a\014\uffad\015\uffad\017\uffad\057" +
    "\uffad\060\uffad\061\uffad\063\uffad\064\uffad\065\uffad\074\uffad" +
    "\113\u013b\001\002\000\024\015\uffae\017\uffae\057\uffae\060" +
    "\uffae\061\uffae\063\uffae\064\uffae\065\uffae\074\uffae\001\002" +
    "\000\026\014\uffac\015\uffac\017\uffac\057\uffac\060\uffac\061" +
    "\uffac\063\uffac\064\uffac\065\uffac\074\uffac\001\002\000\004" +
    "\004\u013c\001\002\000\026\014\uffab\015\uffab\017\uffab\057" +
    "\uffab\060\uffab\061\uffab\063\uffab\064\uffab\065\uffab\074\uffab" +
    "\001\002\000\022\015\uff6b\017\uff6b\060\u013f\061\uff6b\063" +
    "\uff6b\064\uff6b\065\uff6b\074\uff6b\001\002\000\020\015\uffa6" +
    "\017\uffa6\061\uffa6\063\uffa6\064\uffa6\065\uffa6\074\uffa6\001" +
    "\002\000\004\115\u014f\001\002\000\020\015\uff6b\017\uff6b" +
    "\061\uff6b\063\uff6b\064\uff6b\065\uff6b\074\u0141\001\002\000" +
    "\056\004\033\005\045\006\043\007\053\010\044\011\046" +
    "\012\050\016\070\020\063\100\064\105\042\106\041\107" +
    "\047\110\051\117\076\120\062\121\071\122\073\123\074" +
    "\132\037\133\036\134\052\001\002\000\016\015\uffa4\017" +
    "\uffa4\061\uffa4\063\uffa4\064\uffa4\065\uffa4\001\002\000\016" +
    "\015\uff6b\017\uff6b\061\u0144\063\uff6b\064\uff6b\065\uff6b\001" +
    "\002\000\004\115\u0147\001\002\000\014\015\uffe1\017\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\001\002\000\014\015\uffa2\017" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\001\002\000\054\004\033" +
    "\005\045\006\043\007\053\010\044\011\046\012\050\016" +
    "\105\020\063\105\042\106\041\107\047\110\051\117\076" +
    "\120\062\121\071\122\073\123\074\132\037\133\036\134" +
    "\052\001\002\000\032\014\uff9c\015\uff9c\017\uff9c\020\107" +
    "\027\111\030\113\031\114\032\112\062\u014d\063\uff9c\064" +
    "\uff9c\065\uff9c\001\002\000\014\015\uffa1\017\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\001\002\000\016\014\u014b\015\uff9e\017" +
    "\uff9e\063\uff9e\064\uff9e\065\uff9e\001\002\000\054\004\033" +
    "\005\045\006\043\007\053\010\044\011\046\012\050\016" +
    "\105\020\063\105\042\106\041\107\047\110\051\117\076" +
    "\120\062\121\071\122\073\123\074\132\037\133\036\134" +
    "\052\001\002\000\014\015\uff9d\017\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\001\002\000\016\014\uff9b\015\uff9b\017\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\001\002\000\024\015\uffa3\017\uffa3" +
    "\032\243\061\uffa3\063\uffa3\064\uffa3\065\uffa3\076\242\077" +
    "\244\001\002\000\004\004\033\001\002\000\020\015\uffa5" +
    "\017\uffa5\061\uffa5\063\uffa5\064\uffa5\065\uffa5\074\uffa5\001" +
    "\002\000\004\066\u0165\001\002\000\004\066\u0162\001\002" +
    "\000\010\066\u0154\072\u0155\073\u0156\001\002\000\004\004" +
    "\u0160\001\002\000\004\066\u015d\001\002\000\004\066\u0157" +
    "\001\002\000\004\004\u0158\001\002\000\016\015\uff6b\017" +
    "\uff6b\063\uff6b\064\uff6b\065\uff6b\111\u0159\001\002\000\056" +
    "\004\033\005\045\006\043\007\053\010\044\011\046\012" +
    "\050\016\070\020\063\100\064\105\042\106\041\107\047" +
    "\110\051\117\076\120\062\121\071\122\073\123\074\132" +
    "\037\133\036\134\052\001\002\000\014\015\uffa0\017\uffa0" +
    "\063\uffa0\064\uffa0\065\uffa0\001\002\000\014\015\uffdc\017" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\001\002\000\022\015\uff9f" +
    "\017\uff9f\032\243\063\uff9f\064\uff9f\065\uff9f\076\242\077" +
    "\244\001\002\000\004\004\u015e\001\002\000\016\015\uff6b" +
    "\017\uff6b\063\uff6b\064\uff6b\065\uff6b\111\u0159\001\002\000" +
    "\014\015\uffdd\017\uffdd\063\uffdd\064\uffdd\065\uffdd\001\002" +
    "\000\016\015\uff6b\017\uff6b\063\uff6b\064\uff6b\065\uff6b\111" +
    "\u0159\001\002\000\014\015\uffe0\017\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\001\002\000\004\004\u0163\001\002\000\016\015" +
    "\uff6b\017\uff6b\063\uff6b\064\uff6b\065\uff6b\111\u0159\001\002" +
    "\000\014\015\uffde\017\uffde\063\uffde\064\uffde\065\uffde\001" +
    "\002\000\004\004\u0166\001\002\000\016\015\uff6b\017\uff6b" +
    "\063\uff6b\064\uff6b\065\uff6b\111\u0159\001\002\000\014\015" +
    "\uffdf\017\uffdf\063\uffdf\064\uffdf\065\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\024\003\025\004\020\005\021\006\010\007" +
    "\003\022\004\030\007\043\012\044\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\u012a\044\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\055\044\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\065\014\071" +
    "\017\074\020\057\023\060\025\066\026\076\027\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\250\014\071\017\074\020\057\023\060\025\066" +
    "\026\076\027\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\211\001\001\000\024\006\163\013\164" +
    "\014\071\017\167\020\057\023\060\025\165\026\076\027" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\102\044\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\060\025" +
    "\103\026\076\027\064\001\001\000\002\001\001\000\012" +
    "\023\060\025\105\026\076\027\064\001\001\000\002\001" +
    "\001\000\012\023\060\025\120\026\076\027\064\001\001" +
    "\000\002\001\001\000\012\023\060\025\117\026\076\027" +
    "\064\001\001\000\012\023\060\025\116\026\076\027\064" +
    "\001\001\000\012\023\060\025\115\026\076\027\064\001" +
    "\001\000\012\023\060\025\114\026\076\027\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\142\001\001\000\004\006\137\001\001\000\004\006" +
    "\134\001\001\000\004\006\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\150\044\101" +
    "\001\001\000\012\023\060\025\151\026\076\027\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\154" +
    "\044\101\001\001\000\012\023\060\025\155\026\076\027" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\160\044\101\001\001\000\012\023\060\025\161\026" +
    "\076\027\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\211\001" +
    "\001\000\024\006\171\013\164\014\071\017\167\020\057" +
    "\023\060\025\165\026\076\027\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\060\025\202\026\076\027\064\001\001\000" +
    "\002\001\001\000\014\006\204\023\060\025\105\026\076" +
    "\027\064\001\001\000\002\001\001\000\014\006\206\023" +
    "\060\025\105\026\076\027\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\060\025" +
    "\225\026\076\027\064\001\001\000\012\023\060\025\221" +
    "\026\076\027\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\060\025" +
    "\223\026\076\027\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\233\023\060\025" +
    "\105\026\076\027\064\001\001\000\002\001\001\000\004" +
    "\006\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\246\014\071\017\074\020\057\023\060\025\066" +
    "\026\076\027\064\001\001\000\022\013\245\014\071\017" +
    "\074\020\057\023\060\025\066\026\076\027\064\001\001" +
    "\000\022\013\244\014\071\017\074\020\057\023\060\025" +
    "\066\026\076\027\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\201\001\001\000" +
    "\002\001\001\000\006\024\252\044\101\001\001\000\012" +
    "\023\060\025\253\026\076\027\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\260\020\057\023\060" +
    "\025\256\026\076\027\064\001\001\000\002\001\001\000" +
    "\016\017\262\020\057\023\060\025\261\026\076\027\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\271\001" +
    "\001\000\002\001\001\000\004\023\273\001\001\000\006" +
    "\036\274\044\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\277\044\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\303\005\021\006\010\007" +
    "\003\022\004\030\007\043\012\044\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\314\026\310\001\001\000\006\021\311" +
    "\026\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\313\026\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\326\001\001\000\006\021\325\026\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\352" +
    "\001\001\000\002\001\001\000\006\010\332\011\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\332\011\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\341\026\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0101\001\001\000\004\035\u0110" +
    "\001\001\000\002\001\001\000\010\006\206\021\u0103\026" +
    "\310\001\001\000\002\001\001\000\004\006\u0106\001\001" +
    "\000\004\035\u0108\001\001\000\002\001\001\000\006\023" +
    "\u0109\034\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u010d\001" +
    "\001\000\002\001\001\000\006\023\u0109\034\u010f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u011c\001\001\000\006\021\u0118\026" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\332\011\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\u0126" +
    "\026\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\u012b\020\057" +
    "\023\060\025\256\026\076\027\064\001\001\000\002\001" +
    "\001\000\006\015\u012e\016\u012f\001\001\000\002\001\001" +
    "\000\006\036\u013c\044\056\001\001\000\002\001\001\000" +
    "\004\006\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u0138\016\u012f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\u013f\044\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\u0142\044\u0141\001\001\000" +
    "\022\013\u014d\014\071\017\074\020\057\023\060\025\066" +
    "\026\076\027\064\001\001\000\002\001\001\000\006\037" +
    "\u0144\044\u0145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\060\025\u0147\026\076\027" +
    "\064\032\u0149\033\u0148\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\060\025\u0147\026" +
    "\076\027\064\032\u0149\033\u014b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\u014f\026" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\u015a" +
    "\044\u0159\001\001\000\022\013\u015b\014\071\017\074\020" +
    "\057\023\060\025\066\026\076\027\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u015e\044\u0159\001\001\000\002\001\001" +
    "\000\006\041\u0160\044\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\u0163\044\u0159\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\u0166\044\u0159\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }


	
	public StmList parseResult;
	Lexer lexer;
	ErrorMsg.ErrorMsg errorMsg;
	public void syntax_error(java_cup.runtime.Symbol current) {
		report_error("Syntax error (" + symnames[current.sym] + ")", current);
	}
	static String symnames[] = new String[100];
	static {
		symnames[sym.EOF] = "EOF";
		symnames[sym.error] = "error";
		symnames[sym.ID] = "ID";
		symnames[sym.STRING] = "STRING";
		symnames[sym.DATEVAL] = "DATEVAL";
		symnames[sym.TIMEVAL] = "TIMEVAL";
		symnames[sym.TIMESTAMPVAL] = "TIMESTAMPVAL";
		symnames[sym.INTVAL] = "INTVAL";
		symnames[sym.DOUBLEVAL] = "DOUBLEVAL";
		symnames[sym.DOT] = "DOT";
		symnames[sym.COMMA] = "COMMA";
		symnames[sym.SEMICOLON] = "SEMICOLON";
		symnames[sym.LPAREN] = "LPAREN";
		symnames[sym.RPAREN] = "RPAREN";
		symnames[sym.STAR] = "STAR";
		symnames[sym.EQ] = "EQ";
		symnames[sym.NEQ] = "NEQ";
		symnames[sym.LT] = "LT";
		symnames[sym.LE] = "LE";
		symnames[sym.GT] = "GT";
		symnames[sym.GE] = "GE";
		symnames[sym.PLUS] = "PLUS";
		symnames[sym.MINUS] = "MINUS";
		symnames[sym.DIVIDE] = "DIVIDE";
		symnames[sym.CREATE] = "CREATE";
		symnames[sym.DROP] = "DROP";
		symnames[sym.ALTER] = "ALTER";
		symnames[sym.ADD] = "ADD";
		symnames[sym.DATABASE] = "DATABASE";
		symnames[sym.USE] = "USE";
		symnames[sym.SHOW] = "SHOW";
		symnames[sym.TABLE] = "TABLE";
		symnames[sym.VIEW] = "VIEW";
		symnames[sym.INDEX] = "INDEX";
		symnames[sym.SELECT] = "SELECT";
		symnames[sym.INSERT] = "INSERT";
		symnames[sym.UPDATE] = "UPDATE";
		symnames[sym.SET] = "SET";
		symnames[sym.DELETE] = "DELETE";
		symnames[sym.PRIMARY] = "PRIMARY";
		symnames[sym.KEY] = "KEY";
		symnames[sym.UNIQUE] = "UNIQUE";
		symnames[sym.DEFAULT] = "DEFAULT";
		symnames[sym.FROM] = "FROM";
		symnames[sym.WHERE] = "WHERE";
		symnames[sym.GROUP] = "GROUP";
		symnames[sym.ORDER] = "ORDER";
		symnames[sym.DESC] = "DESC";
		symnames[sym.UNION] = "UNION";
		symnames[sym.INTERSECT] = "INTERSECT";
		symnames[sym.EXCEPT] = "EXCEPT";
		symnames[sym.JOIN] = "JOIN";
		symnames[sym.CROSS] = "CROSS";
		symnames[sym.NATURAL] = "NATURAL";
		symnames[sym.FULL] = "FULL";
		symnames[sym.LEFT] = "LEFT";
		symnames[sym.RIGHT] = "RIGHT";
		symnames[sym.HAVING] = "HAVING";
		symnames[sym.BETWEEN] = "BETWEEN";
		symnames[sym.AND] = "AND";
		symnames[sym.OR] = "OR";
		symnames[sym.NOT] = "NOT";
		symnames[sym.VALUES] = "VALUES";
		symnames[sym.DISTINCT] = "DISTINCT";
		symnames[sym.ANY] = "ANY";
		symnames[sym.ALL] = "ALL";
		symnames[sym.NULL] = "NULL";
		symnames[sym.TRUE] = "TRUE";
		symnames[sym.FALSE] = "FALSE";
		symnames[sym.UNKNOWN] = "UNKNOWN";
		symnames[sym.ON] = "ON";
		symnames[sym.IN] = "IN";
		symnames[sym.AS] = "AS";
		symnames[sym.IS] = "IS";
		symnames[sym.BY] = "BY";
		symnames[sym.INTO] = "INTO";
		symnames[sym.COUNT] = "COUNT";
		symnames[sym.SUM] = "SUM";
		symnames[sym.AVG] = "AVG";
		symnames[sym.MIN] = "MIN";
		symnames[sym.MAX] = "MAX";
		symnames[sym.BOOLEAN] = "BOOLEAN";
		symnames[sym.INT] = "INT";
		symnames[sym.CHAR] = "CHAR";
		symnames[sym.VARCHAR] = "VARCHAR";
		symnames[sym.DECIMAL] = "DECIMAL";
		symnames[sym.DOUBLE] = "DOUBLE";		
		symnames[sym.DATE] = "DATE";
		symnames[sym.TIME] = "TIME";
		symnames[sym.TIMESTAMP] = "TIMESTAMP";
	}
	public void report_error(String message, java_cup.runtime.Symbol info) {
		errorMsg.error(info.left, message);
	}
	public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
		this((Scanner)l);
		errorMsg=err;
		lexer=l;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {


	static Symbol.Symbol sym(String s) {
		return Symbol.Symbol.symbol(s);
	}

  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // empty ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*empty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // type ::= TIME 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Type(tleft, sym.TIME); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // type ::= DATE 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Type(tleft, sym.DATE); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // type ::= DOUBLE 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Type(tleft, sym.DOUBLE); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // type ::= DECIMAL LPAREN INTVAL COMMA INTVAL RPAREN 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new DecimalType(tleft, sym.DECIMAL, i1, i2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // type ::= VARCHAR LPAREN INTVAL RPAREN 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new CharType(tleft, sym.VARCHAR, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // type ::= CHAR LPAREN INTVAL RPAREN 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new CharType(tleft, sym.CHAR, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // type ::= CHAR 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new CharType(tleft, sym.CHAR, 1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // type ::= INT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Type(tleft, sym.INT); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // type ::= BOOLEAN 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Type(tleft, sym.BOOLEAN); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // compare_op ::= LE 
            {
              Integer RESULT = null;
		 RESULT = sym.LE; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*compare_op*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // compare_op ::= LT 
            {
              Integer RESULT = null;
		 RESULT = sym.LT; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*compare_op*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // compare_op ::= GE 
            {
              Integer RESULT = null;
		 RESULT = sym.GE; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*compare_op*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // compare_op ::= GT 
            {
              Integer RESULT = null;
		 RESULT = sym.GT; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*compare_op*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // compare_op ::= NEQ 
            {
              Integer RESULT = null;
		 RESULT = sym.NEQ; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*compare_op*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // compare_op ::= EQ 
            {
              Integer RESULT = null;
		 RESULT = sym.EQ; 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*compare_op*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // function ::= MAX LPAREN distinct_part exp RPAREN 
            {
              Function RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Function(mleft, sym.MAX, d, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function ::= MIN LPAREN distinct_part exp RPAREN 
            {
              Function RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Function(mleft, sym.MIN, d, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // function ::= COUNT LPAREN distinct_part exp RPAREN 
            {
              Function RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Function(cleft, sym.COUNT, d, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // function ::= SUM LPAREN distinct_part exp RPAREN 
            {
              Function RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Function(sleft, sym.SUM, d, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // function ::= AVG LPAREN distinct_part exp RPAREN 
            {
              Function RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Function(aleft, sym.AVG, d, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*function*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exp ::= LPAREN exp RPAREN 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // exp ::= exp OROR exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ExpOp(5, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // exp ::= exp DIVIDE exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ExpOp(4, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // exp ::= exp STAR exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ExpOp(3, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // exp ::= exp MINUS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ExpOp(2, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exp ::= exp PLUS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ExpOp(1, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exp ::= const 
            {
              Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = c; 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exp ::= function 
            {
              Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exp ::= STAR 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ExpStar(sleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exp ::= lvalue 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = l; 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condition ::= exp BETWEEN exp AND exp 
            {
              Condition RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Condition(e1.pos, 11, -1, e1, e2, e3, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condition ::= exp IS NOT NULL 
            {
              Condition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		 RESULT = new Condition(e.pos, 10, -1, e, null, null, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condition ::= exp IS NULL 
            {
              Condition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Condition(e.pos, 9, -1, e, null, null, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condition ::= field_list NOT IN LPAREN query RPAREN 
            {
              Condition RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 	ExpList el = null, tail = null;
				while (fl != null) {
					Field f = fl.head;
					if (f.refname != null)
						System.err.println("Wrong ExpList!");
					Exp exp = f.exp;
					ExpList tmp = new ExpList(exp, null);
					if (el == null)
						el = tail = tmp;
					else
						tail = tail.tail = tmp;
					fl = fl.tail;
				}
				RESULT = new Condition(el.head.pos, 8, -1, el, null, null, q, null); 
			
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condition ::= field_list IN LPAREN query RPAREN 
            {
              Condition RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 	ExpList el = null, tail = null;
				while (fl != null) {
					Field f = fl.head;
					if (f.refname != null)
						System.err.println("Wrong ExpList!");
					Exp exp = f.exp;
					ExpList tmp = new ExpList(exp, null);
					if (el == null)
						el = tail = tmp;
					else
						tail = tail.tail = tmp;
					fl = fl.tail;
				}
				RESULT = new Condition(el.head.pos, 7, -1, el, null, null, q, null); 
			
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condition ::= exp compare_op ALL LPAREN query RPAREN 
            {
              Condition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Condition(e.pos, 6, o, e, null, null, q, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condition ::= exp compare_op ANY LPAREN query RPAREN 
            {
              Condition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Condition(e.pos, 5, o, e, null, null, q, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condition ::= LPAREN query RPAREN compare_op LPAREN query RPAREN 
            {
              Condition RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int q1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Query q1 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Query q2 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Condition(lleft, 4, o, (Exp)null, null, null, q1, q2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condition ::= LPAREN query RPAREN compare_op exp 
            {
              Condition RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Condition(lleft, 3, o, e, null, null, q, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condition ::= exp compare_op LPAREN query RPAREN 
            {
              Condition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Condition(e.pos, 2, o, e, null, null, q, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condition ::= exp compare_op exp 
            {
              Condition RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Condition(e1.pos, 1, o, e1, e2, null, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*condition*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // conditions ::= LPAREN conditions RPAREN 
            {
              Conditions RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Conditions c = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = c; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*conditions*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // conditions ::= NOT conditions 
            {
              Conditions RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Conditions c = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Conditions(null, c, 3, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*conditions*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conditions ::= conditions OROR conditions 
            {
              Conditions RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Conditions c = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Conditions cs = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Conditions(null, c, 2, cs); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*conditions*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conditions ::= conditions OR conditions 
            {
              Conditions RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Conditions c = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Conditions cs = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Conditions(null, c, 2, cs); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*conditions*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conditions ::= conditions AND conditions 
            {
              Conditions RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Conditions c = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Conditions cs = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Conditions(null, c, 1, cs); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*conditions*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conditions ::= condition 
            {
              Conditions RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Conditions(c, null, 0, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*conditions*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // order ::= exp DESC 
            {
              OrderBy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new OrderBy(e.pos, e, true); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*order*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // order ::= exp 
            {
              OrderBy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OrderBy(e.pos, e, false); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*order*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // order_list ::= order COMMA order_list 
            {
              OrderByList RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		OrderBy o = (OrderBy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OrderByList ol = (OrderByList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OrderByList(o, ol); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*order_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // order_list ::= order 
            {
              OrderByList RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OrderBy o = (OrderBy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OrderByList(o, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*order_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // on_part ::= ON conditions 
            {
              OnPart RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Conditions c = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OnPart(oleft, c); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*on_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // on_part ::= empty 
            {
              OnPart RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*on_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // order_part ::= ORDER BY order_list 
            {
              OrderPart RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OrderByList ol = (OrderByList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OrderPart(oleft, ol); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*order_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // order_part ::= empty 
            {
              OrderPart RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*order_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // having_part ::= HAVING conditions 
            {
              HavingPart RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Conditions c = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new HavingPart(hleft, c); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*having_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // having_part ::= empty 
            {
              HavingPart RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*having_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // group_part ::= GROUP BY id_list 
            {
              GroupPart RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new GroupPart(gleft, il); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*group_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // group_part ::= empty 
            {
              GroupPart RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*group_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // where_part ::= WHERE conditions 
            {
              WherePart RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Conditions c = (Conditions)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new WherePart(wleft, c); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*where_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // where_part ::= empty 
            {
              WherePart RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*where_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // table ::= LPAREN query RPAREN AS ID 
            {
              Table RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Table(lleft, sym(i), null, q);
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*table*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // table ::= LPAREN query RPAREN ID 
            {
              Table RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Table(lleft, sym(i), null, q);
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*table*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // table ::= ID AS ID 
            {
              Table RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Table(ileft, sym(i), sym(i2), null);
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*table*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // table ::= ID ID 
            {
              Table RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Table(ileft, sym(i), sym(i2), null);
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*table*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // table ::= ID 
            {
              Table RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Table(ileft, sym(i), null, null);
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*table*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tables ::= table COMMA tables 
            {
              TableList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Table t = (Table)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		TableList tl = (TableList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new TableList(t, tl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*tables*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tables ::= table 
            {
              TableList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Table t = (Table)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new TableList(t, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*tables*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // field ::= exp AS ID 
            {
              Field RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Field(e.pos, e, sym(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*field*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // field ::= exp 
            {
              Field RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Field(e.pos, e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*field*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // field_list ::= LPAREN field_list RPAREN 
            {
              FieldList RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = fl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // field_list ::= field COMMA field_list 
            {
              FieldList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new FieldList(f, fl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // field_list ::= field 
            {
              FieldList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new FieldList(f, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // distinct_part ::= DISTINCT 
            {
              Boolean RESULT = null;
		 RESULT = true; 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*distinct_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // distinct_part ::= empty 
            {
              Boolean RESULT = null;
		 RESULT = false; 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*distinct_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // value_list ::= const COMMA value_list 
            {
              ValueList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ValueList vl = (ValueList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ValueList(c, vl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*value_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // value_list ::= const 
            {
              ValueList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ValueList(c, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*value_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // values_part ::= LPAREN value_list RPAREN COMMA values_part 
            {
              ValuesPart RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ValueList vl = (ValueList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ValuesPart vp = (ValuesPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ValuesPart(lleft, vl, vp); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*values_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // values_part ::= LPAREN value_list RPAREN 
            {
              ValuesPart RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ValueList vl = (ValueList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ValuesPart(lleft, vl, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*values_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // const ::= TIMESTAMPVAL 
            {
              Const RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstString(sleft, sym.STRING, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // const ::= TIMESTAMP TIMESTAMPVAL 
            {
              Const RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstTimestamp(tleft, sym.TIMESTAMPVAL, ti); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // const ::= TIMEVAL 
            {
              Const RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstString(sleft, sym.STRING, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // const ::= TIME TIMEVAL 
            {
              Const RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String ti = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstTime(tleft, sym.TIMEVAL, ti); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // const ::= DATEVAL 
            {
              Const RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstString(sleft, sym.STRING, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // const ::= DATE DATEVAL 
            {
              Const RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String da = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstDate(dleft, sym.DATEVAL, da); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // const ::= DOUBLEVAL 
            {
              Const RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstDouble(dleft, sym.DOUBLEVAL, d); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // const ::= UNKNOWN 
            {
              Const RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstBool(uleft, sym.UNKNOWN, 2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // const ::= NULL 
            {
              Const RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstNull(ileft, sym.NULL); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // const ::= FALSE 
            {
              Const RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstBool(fleft, sym.FALSE, 0); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // const ::= TRUE 
            {
              Const RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstBool(tleft, sym.TRUE, 1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // const ::= STRING 
            {
              Const RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstString(sleft, sym.STRING, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // const ::= INTVAL 
            {
              Const RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ConstInt(ileft, sym.INTVAL, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*const*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lvalue ::= ID DOT ID 
            {
              Exp RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ExpIdDotId(i1left, sym(i1), sym(i2)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lvalue ::= ID 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ExpId(ileft, sym(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // id_list ::= lvalue COMMA id_list 
            {
              IdList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IdList(ileft, i, il); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*id_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // id_list ::= lvalue 
            {
              IdList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IdList(ileft, i, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*id_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // attr ::= PRIMARY KEY LPAREN id_list RPAREN 
            {
              Attribute RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Attribute(pleft, null, null, false, false, null, true, il); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*attr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // attr ::= ID type UNIQUE 
            {
              Attribute RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Attribute(ileft, sym(i), t, true, false, null, false, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*attr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // attr ::= ID type PRIMARY KEY 
            {
              Attribute RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Attribute(ileft, sym(i), t, true, false, null, false, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*attr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // attr ::= ID type DEFAULT const 
            {
              Attribute RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Attribute(ileft, sym(i), t, false, false, c, false, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*attr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // attr ::= ID type NOT NULL 
            {
              Attribute RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Attribute(ileft, sym(i), t, false, true, null, false, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*attr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // attr ::= ID type 
            {
              Attribute RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Attribute(ileft, sym(i), t, false, false, null, false, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*attr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // attr_list ::= attr COMMA attr_list 
            {
              AttributeList RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Attribute a = (Attribute)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		AttributeList al = (AttributeList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new AttributeList(a, al); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*attr_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // attr_list ::= attr 
            {
              AttributeList RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Attribute a = (Attribute)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new AttributeList(a, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*attr_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // create_view ::= CREATE VIEW ID LPAREN id_list RPAREN AS query 
            {
              CreateView RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new CreateView(cleft, sym(i), il, q); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*create_view*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // create_view ::= CREATE VIEW ID AS query 
            {
              CreateView RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new CreateView(cleft, sym(i), null, q); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*create_view*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // query ::= query EXCEPT ALL query 
            {
              Query RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Query q1 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q2 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new SetQuery(q1.pos, 6, q1, q2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // query ::= query EXCEPT query 
            {
              Query RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Query q1 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q2 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new SetQuery(q1.pos, 5, q1, q2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // query ::= query INTERSECT ALL query 
            {
              Query RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Query q1 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q2 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new SetQuery(q1.pos, 4, q1, q2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // query ::= query INTERSECT query 
            {
              Query RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Query q1 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q2 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new SetQuery(q1.pos, 3, q1, q2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // query ::= query UNION ALL query 
            {
              Query RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Query q1 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q2 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new SetQuery(q1.pos, 2, q1, q2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // query ::= query UNION query 
            {
              Query RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Query q1 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q2 = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new SetQuery(q1.pos, 1, q1, q2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // query ::= SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part 
            {
              Query RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		FieldList f = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OnPart o = (OnPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new JoinQuery(sleft, 5, d, f, sym(i1), sym(i2), o); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // query ::= SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part 
            {
              Query RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		FieldList f = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OnPart o = (OnPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new JoinQuery(sleft, 4, d, f, sym(i1), sym(i2), o); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // query ::= SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part 
            {
              Query RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		FieldList f = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OnPart o = (OnPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new JoinQuery(sleft, 3, d, f, sym(i1), sym(i2), o); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // query ::= SELECT distinct_part field_list FROM ID FULL JOIN ID on_part 
            {
              Query RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		FieldList f = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OnPart o = (OnPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new JoinQuery(sleft, 2, d, f, sym(i1), sym(i2), o); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // query ::= SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part 
            {
              Query RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		FieldList f = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OnPart o = (OnPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new JoinQuery(sleft, 1, d, f, sym(i1), sym(i2), o); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // query ::= SELECT distinct_part field_list FROM tables where_part group_part having_part order_part 
            {
              Query RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		FieldList f = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		TableList t = (TableList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		WherePart w = (WherePart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		GroupPart g = (GroupPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		HavingPart h = (HavingPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		OrderPart o = (OrderPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new SimpleQuery(sleft, d, f, t, w, g, h, o); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // query ::= LPAREN query RPAREN 
            {
              Query RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = q; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*query*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // update ::= UPDATE ID AS ID SET lvalue EQ const where_part 
            {
              Update RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		WherePart w = (WherePart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Update(uleft, 2, sym(i), sym(i2), l, c, w); 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*update*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // update ::= UPDATE ID SET lvalue EQ const where_part 
            {
              Update RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		WherePart w = (WherePart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Update(uleft, 1, sym(i), null, l, c, w); 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*update*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // insert ::= INSERT INTO ID LPAREN id_list RPAREN query 
            {
              Insert RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Insert(ileft, sym(id), 1, null, il, q); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*insert*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // insert ::= INSERT INTO ID LPAREN id_list RPAREN VALUES values_part 
            {
              Insert RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ValuesPart vp = (ValuesPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Insert(ileft, sym(id), 3, vp, il, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*insert*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // insert ::= INSERT INTO ID query 
            {
              Insert RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Insert(ileft, sym(id), 2, null, null, q); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*insert*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // insert ::= INSERT INTO ID VALUES values_part 
            {
              Insert RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ValuesPart vp = (ValuesPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Insert(ileft, sym(id), 1, vp, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*insert*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // alter ::= ALTER TABLE ID DROP id_list 
            {
              AlterTable RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new AlterTable(aleft, sym(i), 2, null, il); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*alter*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // alter ::= ALTER TABLE ID ADD LPAREN attr_list RPAREN 
            {
              AlterTable RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		AttributeList al = (AttributeList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new AlterTable(aleft, sym(i), 1, al, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*alter*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // alter ::= ALTER TABLE ID ADD attr 
            {
              AlterTable RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Attribute at = (Attribute)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new AlterTable(aleft, sym(i), 1, new AttributeList(at, null), null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*alter*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stm ::= DROP INDEX ID ON ID 
            {
              Stm RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new DropIndex(dleft, sym(i), sym(i2)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stm ::= CREATE INDEX ID ON ID LPAREN id_list RPAREN 
            {
              Stm RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new CreateIndex(cleft, sym(i1), sym(i2), il); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stm ::= DROP VIEW id_list 
            {
              Stm RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		IdList il = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new DropView(dleft, il); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stm ::= create_view 
            {
              Stm RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		CreateView c = (CreateView)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = c; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stm ::= query 
            {
              Stm RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = q; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stm ::= DELETE FROM ID where_part 
            {
              Stm RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		WherePart w = (WherePart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Delete(dleft, sym(i), w); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stm ::= update 
            {
              Stm RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Update u = (Update)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = u; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stm ::= insert 
            {
              Stm RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Insert i = (Insert)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stm ::= alter 
            {
              Stm RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		AlterTable a = (AlterTable)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = a; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stm ::= DROP TABLE id_list 
            {
              Stm RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		IdList i = (IdList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new DropTable(dleft, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stm ::= CREATE TABLE ID LPAREN attr_list RPAREN 
            {
              Stm RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		AttributeList al = (AttributeList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new CreateTable(cleft, sym(i), al); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stm ::= SHOW VIEW 
            {
              Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ShowView(sleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stm ::= SHOW TABLE 
            {
              Stm RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ShowTable(sleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stm ::= USE ID 
            {
              Stm RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new UseDB(uleft, sym(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stm ::= DROP DATABASE ID 
            {
              Stm RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new DropDB(dleft, sym(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stm ::= CREATE DATABASE ID 
            {
              Stm RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new CreateDB(cleft, sym(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stm ::= empty 
            {
              Stm RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*stm*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stm_list ::= stm SEMICOLON stm_list 
            {
              StmList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Stm e = (Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		StmList el = (StmList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new StmList(e, el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*stm_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stm_list ::= stm SEMICOLON 
            {
              StmList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Stm e = (Stm)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new StmList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*stm_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SQL_statements ::= empty 
            {
              StmList RESULT = null;
		 parser.parseResult = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*SQL_statements*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SQL_statements ::= stm_list 
            {
              StmList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		StmList el = (StmList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 parser.parseResult = (StmList)el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*SQL_statements*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SQL_statements EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		StmList start_val = (StmList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

