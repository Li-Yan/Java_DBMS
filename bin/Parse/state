lalr_state [0]: {
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [alter ::= (*) ALTER TABLE ID ADD LPAREN attr_list RPAREN , {SEMICOLON }]
  [stm ::= (*) insert , {SEMICOLON }]
  [stm ::= (*) empty , {SEMICOLON }]
  [empty ::= (*) , {EOF SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= (*) INSERT INTO ID LPAREN id_list RPAREN query , {SEMICOLON }]
  [stm ::= (*) DROP VIEW id_list , {SEMICOLON }]
  [stm ::= (*) SHOW VIEW , {SEMICOLON }]
  [SQL_statements ::= (*) stm_list , {EOF }]
  [query ::= (*) query EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [alter ::= (*) ALTER TABLE ID DROP id_list , {SEMICOLON }]
  [stm ::= (*) update , {SEMICOLON }]
  [stm ::= (*) CREATE DATABASE ID , {SEMICOLON }]
  [query ::= (*) query UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [update ::= (*) UPDATE ID SET lvalue EQ const where_part , {SEMICOLON }]
  [stm ::= (*) CREATE INDEX ID ON ID LPAREN id_list RPAREN , {SEMICOLON }]
  [stm ::= (*) CREATE TABLE ID LPAREN attr_list RPAREN , {SEMICOLON }]
  [SQL_statements ::= (*) empty , {EOF }]
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= (*) INSERT INTO ID VALUES values_part , {SEMICOLON }]
  [stm ::= (*) DELETE FROM ID where_part , {SEMICOLON }]
  [stm ::= (*) DROP DATABASE ID , {SEMICOLON }]
  [query ::= (*) query UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [update ::= (*) UPDATE ID AS ID SET lvalue EQ const where_part , {SEMICOLON }]
  [stm ::= (*) DROP INDEX ID ON ID , {SEMICOLON }]
  [stm ::= (*) DROP TABLE id_list , {SEMICOLON }]
  [stm_list ::= (*) stm SEMICOLON , {EOF }]
  [create_view ::= (*) CREATE VIEW ID AS query , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= (*) INSERT INTO ID query , {SEMICOLON }]
  [stm ::= (*) query , {SEMICOLON }]
  [stm ::= (*) USE ID , {SEMICOLON }]
  [query ::= (*) query INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON UNION INTERSECT EXCEPT }]
  [alter ::= (*) ALTER TABLE ID ADD attr , {SEMICOLON }]
  [stm ::= (*) alter , {SEMICOLON }]
  [stm_list ::= (*) stm SEMICOLON stm_list , {EOF }]
  [create_view ::= (*) CREATE VIEW ID LPAREN id_list RPAREN AS query , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= (*) INSERT INTO ID LPAREN id_list RPAREN VALUES values_part , {SEMICOLON }]
  [stm ::= (*) create_view , {SEMICOLON }]
  [stm ::= (*) SHOW TABLE , {SEMICOLON }]
  [$START ::= (*) SQL_statements EOF , {EOF }]
}
transition on SQL_statements to state [19]
transition on UPDATE to state [18]
transition on DELETE to state [17]
transition on USE to state [16]
transition on stm to state [15]
transition on stm_list to state [14]
transition on DROP to state [13]
transition on ALTER to state [12]
transition on INSERT to state [11]
transition on CREATE to state [10]
transition on empty to state [9]
transition on update to state [8]
transition on LPAREN to state [7]
transition on query to state [6]
transition on create_view to state [5]
transition on SHOW to state [4]
transition on SELECT to state [3]
transition on alter to state [2]
transition on insert to state [1]

-------------------
lalr_state [1]: {
  [stm ::= insert (*) , {SEMICOLON }]
}

-------------------
lalr_state [2]: {
  [stm ::= alter (*) , {SEMICOLON }]
}

-------------------
lalr_state [3]: {
  [query ::= SELECT (*) distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT (*) distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT (*) distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT (*) distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [distinct_part ::= (*) DISTINCT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [query ::= SELECT (*) distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [empty ::= (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [query ::= SELECT (*) distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [distinct_part ::= (*) empty , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}
transition on distinct_part to state [296]
transition on empty to state [63]
transition on DISTINCT to state [62]

-------------------
lalr_state [4]: {
  [stm ::= SHOW (*) VIEW , {SEMICOLON }]
  [stm ::= SHOW (*) TABLE , {SEMICOLON }]
}
transition on VIEW to state [295]
transition on TABLE to state [294]

-------------------
lalr_state [5]: {
  [stm ::= create_view (*) , {SEMICOLON }]
}

-------------------
lalr_state [6]: {
  [query ::= query (*) UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [stm ::= query (*) , {SEMICOLON }]
  [query ::= query (*) UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [7]: {
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= LPAREN (*) query RPAREN , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [132]

-------------------
lalr_state [8]: {
  [stm ::= update (*) , {SEMICOLON }]
}

-------------------
lalr_state [9]: {
  [stm ::= empty (*) , {SEMICOLON }]
  [SQL_statements ::= empty (*) , {EOF }]
}

-------------------
lalr_state [10]: {
  [create_view ::= CREATE (*) VIEW ID LPAREN id_list RPAREN AS query , {SEMICOLON }]
  [stm ::= CREATE (*) INDEX ID ON ID LPAREN id_list RPAREN , {SEMICOLON }]
  [stm ::= CREATE (*) DATABASE ID , {SEMICOLON }]
  [create_view ::= CREATE (*) VIEW ID AS query , {SEMICOLON }]
  [stm ::= CREATE (*) TABLE ID LPAREN attr_list RPAREN , {SEMICOLON }]
}
transition on VIEW to state [274]
transition on TABLE to state [273]
transition on DATABASE to state [272]
transition on INDEX to state [271]

-------------------
lalr_state [11]: {
  [insert ::= INSERT (*) INTO ID LPAREN id_list RPAREN VALUES values_part , {SEMICOLON }]
  [insert ::= INSERT (*) INTO ID query , {SEMICOLON }]
  [insert ::= INSERT (*) INTO ID LPAREN id_list RPAREN query , {SEMICOLON }]
  [insert ::= INSERT (*) INTO ID VALUES values_part , {SEMICOLON }]
}
transition on INTO to state [252]

-------------------
lalr_state [12]: {
  [alter ::= ALTER (*) TABLE ID DROP id_list , {SEMICOLON }]
  [alter ::= ALTER (*) TABLE ID ADD LPAREN attr_list RPAREN , {SEMICOLON }]
  [alter ::= ALTER (*) TABLE ID ADD attr , {SEMICOLON }]
}
transition on TABLE to state [207]

-------------------
lalr_state [13]: {
  [stm ::= DROP (*) INDEX ID ON ID , {SEMICOLON }]
  [stm ::= DROP (*) DATABASE ID , {SEMICOLON }]
  [stm ::= DROP (*) TABLE id_list , {SEMICOLON }]
  [stm ::= DROP (*) VIEW id_list , {SEMICOLON }]
}
transition on TABLE to state [197]
transition on VIEW to state [196]
transition on DATABASE to state [195]
transition on INDEX to state [194]

-------------------
lalr_state [14]: {
  [SQL_statements ::= stm_list (*) , {EOF }]
}

-------------------
lalr_state [15]: {
  [stm_list ::= stm (*) SEMICOLON stm_list , {EOF }]
  [stm_list ::= stm (*) SEMICOLON , {EOF }]
}
transition on SEMICOLON to state [191]

-------------------
lalr_state [16]: {
  [stm ::= USE (*) ID , {SEMICOLON }]
}
transition on ID to state [190]

-------------------
lalr_state [17]: {
  [stm ::= DELETE (*) FROM ID where_part , {SEMICOLON }]
}
transition on FROM to state [187]

-------------------
lalr_state [18]: {
  [update ::= UPDATE (*) ID SET lvalue EQ const where_part , {SEMICOLON }]
  [update ::= UPDATE (*) ID AS ID SET lvalue EQ const where_part , {SEMICOLON }]
}
transition on ID to state [21]

-------------------
lalr_state [19]: {
  [$START ::= SQL_statements (*) EOF , {EOF }]
}
transition on EOF to state [20]

-------------------
lalr_state [20]: {
  [$START ::= SQL_statements EOF (*) , {EOF }]
}

-------------------
lalr_state [21]: {
  [update ::= UPDATE ID (*) SET lvalue EQ const where_part , {SEMICOLON }]
  [update ::= UPDATE ID (*) AS ID SET lvalue EQ const where_part , {SEMICOLON }]
}
transition on SET to state [23]
transition on AS to state [22]

-------------------
lalr_state [22]: {
  [update ::= UPDATE ID AS (*) ID SET lvalue EQ const where_part , {SEMICOLON }]
}
transition on ID to state [181]

-------------------
lalr_state [23]: {
  [update ::= UPDATE ID SET (*) lvalue EQ const where_part , {SEMICOLON }]
  [lvalue ::= (*) ID DOT ID , {EQ }]
  [lvalue ::= (*) ID , {EQ }]
}
transition on lvalue to state [25]
transition on ID to state [24]

-------------------
lalr_state [24]: {
  [lvalue ::= ID (*) DOT ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [lvalue ::= ID (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DOT to state [179]

-------------------
lalr_state [25]: {
  [update ::= UPDATE ID SET lvalue (*) EQ const where_part , {SEMICOLON }]
}
transition on EQ to state [26]

-------------------
lalr_state [26]: {
  [const ::= (*) DATEVAL , {SEMICOLON WHERE }]
  [const ::= (*) UNKNOWN , {SEMICOLON WHERE }]
  [const ::= (*) TRUE , {SEMICOLON WHERE }]
  [const ::= (*) TIMEVAL , {SEMICOLON WHERE }]
  [const ::= (*) DATE DATEVAL , {SEMICOLON WHERE }]
  [const ::= (*) NULL , {SEMICOLON WHERE }]
  [const ::= (*) STRING , {SEMICOLON WHERE }]
  [const ::= (*) TIMESTAMPVAL , {SEMICOLON WHERE }]
  [update ::= UPDATE ID SET lvalue EQ (*) const where_part , {SEMICOLON }]
  [const ::= (*) TIME TIMEVAL , {SEMICOLON WHERE }]
  [const ::= (*) DOUBLEVAL , {SEMICOLON WHERE }]
  [const ::= (*) FALSE , {SEMICOLON WHERE }]
  [const ::= (*) INTVAL , {SEMICOLON WHERE }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {SEMICOLON WHERE }]
}
transition on TIMEVAL to state [40]
transition on TIMESTAMP to state [39]
transition on UNKNOWN to state [38]
transition on DOUBLEVAL to state [37]
transition on FALSE to state [36]
transition on INTVAL to state [35]
transition on STRING to state [34]
transition on TIMESTAMPVAL to state [33]
transition on DATEVAL to state [32]
transition on NULL to state [31]
transition on TRUE to state [30]
transition on const to state [29]
transition on DATE to state [28]
transition on TIME to state [27]

-------------------
lalr_state [27]: {
  [const ::= TIME (*) TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on TIMEVAL to state [178]

-------------------
lalr_state [28]: {
  [const ::= DATE (*) DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DATEVAL to state [177]

-------------------
lalr_state [29]: {
  [where_part ::= (*) WHERE conditions , {SEMICOLON }]
  [empty ::= (*) , {SEMICOLON }]
  [where_part ::= (*) empty , {SEMICOLON }]
  [update ::= UPDATE ID SET lvalue EQ const (*) where_part , {SEMICOLON }]
}
transition on empty to state [44]
transition on where_part to state [43]
transition on WHERE to state [42]

-------------------
lalr_state [30]: {
  [const ::= TRUE (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [31]: {
  [const ::= NULL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [32]: {
  [const ::= DATEVAL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [33]: {
  [const ::= TIMESTAMPVAL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [34]: {
  [const ::= STRING (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [35]: {
  [const ::= INTVAL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [36]: {
  [const ::= FALSE (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [37]: {
  [const ::= DOUBLEVAL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [38]: {
  [const ::= UNKNOWN (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [39]: {
  [const ::= TIMESTAMP (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on TIMESTAMPVAL to state [41]

-------------------
lalr_state [40]: {
  [const ::= TIMEVAL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [41]: {
  [const ::= TIMESTAMP TIMESTAMPVAL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [42]: {
  [field_list ::= (*) field , {NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) field COMMA field_list , {NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp BETWEEN exp AND exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) LPAREN field_list RPAREN , {NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) NOT conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp , {COMMA NOT IN }]
  [const ::= (*) NULL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) condition , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [where_part ::= WHERE (*) conditions , {SEMICOLON RPAREN GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [field ::= (*) exp AS ID , {COMMA NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) function , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [58]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [53]
transition on TRUE to state [30]
transition on exp to state [52]
transition on conditions to state [51]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [43]: {
  [update ::= UPDATE ID SET lvalue EQ const where_part (*) , {SEMICOLON }]
}

-------------------
lalr_state [44]: {
  [where_part ::= empty (*) , {SEMICOLON RPAREN GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [45]: {
  [field_list ::= field (*) COMMA field_list , {RPAREN FROM NOT IN }]
  [field_list ::= field (*) , {RPAREN FROM NOT IN }]
}
transition on COMMA to state [171]

-------------------
lalr_state [46]: {
  [exp ::= const (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [47]: {
  [function ::= SUM (*) LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on LPAREN to state [167]

-------------------
lalr_state [48]: {
  [exp ::= STAR (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [49]: {
  [field_list ::= (*) field , {NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) field COMMA field_list , {NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp BETWEEN exp AND exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) LPAREN field_list RPAREN , {NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= NOT (*) conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) NOT conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp , {COMMA NOT IN }]
  [const ::= (*) NULL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) condition , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp AS ID , {COMMA NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) function , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [58]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [53]
transition on TRUE to state [30]
transition on exp to state [52]
transition on conditions to state [166]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [50]: {
  [exp ::= function (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [51]: {
  [conditions ::= conditions (*) AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [where_part ::= WHERE conditions (*) , {SEMICOLON RPAREN GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [conditions ::= conditions (*) OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on OR to state [161]
transition on OROR to state [160]
transition on AND to state [159]

-------------------
lalr_state [52]: {
  [condition ::= exp (*) compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp (*) compare_op ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp (*) BETWEEN exp AND exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) PLUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [compare_op ::= (*) LT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= exp (*) IS NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) DIVIDE exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [field ::= exp (*) , {COMMA NOT IN }]
  [compare_op ::= (*) GT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= exp (*) compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) MINUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [compare_op ::= (*) EQ , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) LE , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= exp (*) compare_op ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp (*) IS NOT NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= exp (*) AS ID , {COMMA NOT IN }]
  [exp ::= exp (*) OROR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [compare_op ::= (*) GE , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [exp ::= exp (*) STAR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [compare_op ::= (*) NEQ , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}
transition on IS to state [138]
transition on LT to state [121]
transition on AS to state [137]
transition on GT to state [123]
transition on BETWEEN to state [136]
transition on LE to state [124]
transition on compare_op to state [135]
transition on PLUS to state [70]
transition on EQ to state [122]
transition on STAR to state [68]
transition on NEQ to state [126]
transition on GE to state [125]
transition on OROR to state [71]
transition on DIVIDE to state [73]
transition on MINUS to state [72]

-------------------
lalr_state [53]: {
  [field_list ::= (*) field , {RPAREN NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp DIVIDE exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {RPAREN OROR AND OR }]
  [condition ::= (*) exp compare_op exp , {RPAREN OROR AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) conditions OR conditions , {RPAREN OROR AND OR }]
  [field_list ::= (*) field COMMA field_list , {RPAREN NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp OROR exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= (*) exp BETWEEN exp AND exp , {RPAREN OROR AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp PLUS exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) conditions OROR conditions , {RPAREN OROR AND OR }]
  [field_list ::= LPAREN (*) field_list RPAREN , {NOT IN }]
  [field_list ::= (*) LPAREN field_list RPAREN , {RPAREN NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= LPAREN (*) exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= LPAREN (*) query RPAREN compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) lvalue , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {RPAREN OROR AND OR }]
  [const ::= (*) DATEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) NOT conditions , {RPAREN OROR AND OR }]
  [field ::= (*) exp , {COMMA RPAREN NOT IN }]
  [const ::= (*) NULL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) STAR , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= LPAREN (*) query RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) condition , {RPAREN OROR AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp STAR exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= (*) exp IS NULL , {RPAREN OROR AND OR }]
  [conditions ::= LPAREN (*) conditions RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {RPAREN OROR AND OR }]
  [field ::= (*) exp AS ID , {COMMA RPAREN NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) function , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) conditions AND conditions , {RPAREN OROR AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [117]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [116]
transition on TRUE to state [30]
transition on exp to state [115]
transition on conditions to state [114]
transition on function to state [50]
transition on query to state [113]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on SELECT to state [3]
transition on field to state [45]

-------------------
lalr_state [54]: {
  [function ::= AVG (*) LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on LPAREN to state [109]

-------------------
lalr_state [55]: {
  [conditions ::= condition (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [56]: {
  [function ::= MIN (*) LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on LPAREN to state [105]

-------------------
lalr_state [57]: {
  [function ::= MAX (*) LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on LPAREN to state [101]

-------------------
lalr_state [58]: {
  [condition ::= field_list (*) IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= field_list (*) NOT IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on NOT to state [81]
transition on IN to state [80]

-------------------
lalr_state [59]: {
  [function ::= COUNT (*) LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on LPAREN to state [61]

-------------------
lalr_state [60]: {
  [exp ::= lvalue (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [61]: {
  [distinct_part ::= (*) DISTINCT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [empty ::= (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [distinct_part ::= (*) empty , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [function ::= COUNT LPAREN (*) distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on distinct_part to state [64]
transition on empty to state [63]
transition on DISTINCT to state [62]

-------------------
lalr_state [62]: {
  [distinct_part ::= DISTINCT (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}

-------------------
lalr_state [63]: {
  [distinct_part ::= empty (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}

-------------------
lalr_state [64]: {
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= COUNT LPAREN distinct_part (*) exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [65]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [65]: {
  [exp ::= exp (*) STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= COUNT LPAREN distinct_part exp (*) RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on RPAREN to state [79]
transition on STAR to state [68]

-------------------
lalr_state [66]: {
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= LPAREN (*) exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [67]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [67]: {
  [exp ::= exp (*) STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= LPAREN exp (*) RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on RPAREN to state [69]
transition on STAR to state [68]

-------------------
lalr_state [68]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) NULL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIME TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATE DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) function , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) UNKNOWN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) const , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DOUBLEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp STAR (*) exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [78]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [69]: {
  [exp ::= LPAREN exp RPAREN (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [70]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) NULL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp PLUS (*) exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIME TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATE DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) function , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) UNKNOWN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) const , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DOUBLEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [77]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [71]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) NULL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIME TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATE DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) function , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) UNKNOWN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp OROR (*) exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) const , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DOUBLEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [76]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [72]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) NULL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIME TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATE DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) function , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) UNKNOWN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp MINUS (*) exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) const , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DOUBLEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [75]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [73]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) NULL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIME TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATE DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp DIVIDE (*) exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) function , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) UNKNOWN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DATEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) const , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) DOUBLEVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [74]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [74]: {
  [exp ::= exp (*) STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp DIVIDE exp (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on STAR to state [68]

-------------------
lalr_state [75]: {
  [exp ::= exp (*) STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp MINUS exp (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on STAR to state [68]

-------------------
lalr_state [76]: {
  [exp ::= exp (*) STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp OROR exp (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on STAR to state [68]

-------------------
lalr_state [77]: {
  [exp ::= exp (*) STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp PLUS exp (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on STAR to state [68]

-------------------
lalr_state [78]: {
  [exp ::= exp (*) STAR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) OROR exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) MINUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) DIVIDE exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) PLUS exp , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp STAR exp (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on STAR to state [68]

-------------------
lalr_state [79]: {
  [function ::= COUNT LPAREN distinct_part exp RPAREN (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [80]: {
  [condition ::= field_list IN (*) LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on LPAREN to state [98]

-------------------
lalr_state [81]: {
  [condition ::= field_list NOT (*) IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on IN to state [82]

-------------------
lalr_state [82]: {
  [condition ::= field_list NOT IN (*) LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on LPAREN to state [83]

-------------------
lalr_state [83]: {
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= field_list NOT IN LPAREN (*) query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [84]

-------------------
lalr_state [84]: {
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= field_list NOT IN LPAREN query (*) RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]
transition on RPAREN to state [85]

-------------------
lalr_state [85]: {
  [condition ::= field_list NOT IN LPAREN query RPAREN (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [86]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query EXCEPT (*) query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query EXCEPT (*) ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [96]
transition on ALL to state [95]

-------------------
lalr_state [87]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query INTERSECT (*) ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query INTERSECT (*) query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [93]
transition on ALL to state [92]

-------------------
lalr_state [88]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query UNION (*) ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query UNION (*) query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [90]
transition on ALL to state [89]

-------------------
lalr_state [89]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query UNION ALL (*) query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [91]

-------------------
lalr_state [90]: {
  [query ::= query (*) UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query UNION query (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [91]: {
  [query ::= query (*) UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query UNION ALL query (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [92]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query INTERSECT ALL (*) query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [94]

-------------------
lalr_state [93]: {
  [query ::= query (*) UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query INTERSECT query (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [94]: {
  [query ::= query (*) UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query INTERSECT ALL query (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [95]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query EXCEPT ALL (*) query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [97]

-------------------
lalr_state [96]: {
  [query ::= query (*) UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query EXCEPT query (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [97]: {
  [query ::= query (*) UNION query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query EXCEPT ALL query (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [98]: {
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= field_list IN LPAREN (*) query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [99]

-------------------
lalr_state [99]: {
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= field_list IN LPAREN query (*) RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]
transition on RPAREN to state [100]

-------------------
lalr_state [100]: {
  [condition ::= field_list IN LPAREN query RPAREN (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [101]: {
  [function ::= MAX LPAREN (*) distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [distinct_part ::= (*) DISTINCT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [empty ::= (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [distinct_part ::= (*) empty , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}
transition on distinct_part to state [102]
transition on empty to state [63]
transition on DISTINCT to state [62]

-------------------
lalr_state [102]: {
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= MAX LPAREN distinct_part (*) exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [103]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [103]: {
  [exp ::= exp (*) STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= MAX LPAREN distinct_part exp (*) RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on RPAREN to state [104]
transition on STAR to state [68]

-------------------
lalr_state [104]: {
  [function ::= MAX LPAREN distinct_part exp RPAREN (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [105]: {
  [distinct_part ::= (*) DISTINCT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [empty ::= (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [function ::= MIN LPAREN (*) distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [distinct_part ::= (*) empty , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}
transition on distinct_part to state [106]
transition on empty to state [63]
transition on DISTINCT to state [62]

-------------------
lalr_state [106]: {
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= MIN LPAREN distinct_part (*) exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [107]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [107]: {
  [exp ::= exp (*) STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= MIN LPAREN distinct_part exp (*) RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on RPAREN to state [108]
transition on STAR to state [68]

-------------------
lalr_state [108]: {
  [function ::= MIN LPAREN distinct_part exp RPAREN (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [109]: {
  [distinct_part ::= (*) DISTINCT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [empty ::= (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [function ::= AVG LPAREN (*) distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [distinct_part ::= (*) empty , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}
transition on distinct_part to state [110]
transition on empty to state [63]
transition on DISTINCT to state [62]

-------------------
lalr_state [110]: {
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= AVG LPAREN distinct_part (*) exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [111]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [111]: {
  [exp ::= exp (*) STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= AVG LPAREN distinct_part exp (*) RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= exp (*) MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on RPAREN to state [112]
transition on STAR to state [68]

-------------------
lalr_state [112]: {
  [function ::= AVG LPAREN distinct_part exp RPAREN (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [113]: {
  [condition ::= LPAREN query (*) RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= LPAREN query (*) RPAREN compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on RPAREN to state [165]
transition on EXCEPT to state [86]

-------------------
lalr_state [114]: {
  [conditions ::= conditions (*) AND conditions , {RPAREN OROR AND OR }]
  [conditions ::= conditions (*) OROR conditions , {RPAREN OROR AND OR }]
  [conditions ::= LPAREN conditions (*) RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OR conditions , {RPAREN OROR AND OR }]
}
transition on OR to state [161]
transition on OROR to state [160]
transition on AND to state [159]
transition on RPAREN to state [158]

-------------------
lalr_state [115]: {
  [condition ::= exp (*) compare_op exp , {RPAREN OROR AND OR }]
  [condition ::= exp (*) compare_op ALL LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [condition ::= exp (*) BETWEEN exp AND exp , {RPAREN OROR AND OR }]
  [exp ::= exp (*) PLUS exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= LPAREN exp (*) RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [compare_op ::= (*) LT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= exp (*) IS NULL , {RPAREN OROR AND OR }]
  [exp ::= exp (*) DIVIDE exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [field ::= exp (*) , {COMMA RPAREN NOT IN }]
  [compare_op ::= (*) GT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= exp (*) compare_op LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [exp ::= exp (*) MINUS exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [compare_op ::= (*) EQ , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) LE , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= exp (*) compare_op ANY LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [condition ::= exp (*) IS NOT NULL , {RPAREN OROR AND OR }]
  [field ::= exp (*) AS ID , {COMMA RPAREN NOT IN }]
  [exp ::= exp (*) OROR exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [compare_op ::= (*) GE , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [exp ::= exp (*) STAR exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [compare_op ::= (*) NEQ , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}
transition on IS to state [138]
transition on LT to state [121]
transition on AS to state [137]
transition on RPAREN to state [69]
transition on GT to state [123]
transition on BETWEEN to state [136]
transition on LE to state [124]
transition on compare_op to state [135]
transition on PLUS to state [70]
transition on EQ to state [122]
transition on STAR to state [68]
transition on NEQ to state [126]
transition on GE to state [125]
transition on OROR to state [71]
transition on DIVIDE to state [73]
transition on MINUS to state [72]

-------------------
lalr_state [116]: {
  [field_list ::= (*) field , {RPAREN NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp DIVIDE exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {RPAREN OROR AND OR }]
  [condition ::= (*) exp compare_op exp , {RPAREN OROR AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) conditions OR conditions , {RPAREN OROR AND OR }]
  [field_list ::= (*) field COMMA field_list , {RPAREN NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp OROR exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= (*) exp BETWEEN exp AND exp , {RPAREN OROR AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp PLUS exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) conditions OROR conditions , {RPAREN OROR AND OR }]
  [field_list ::= LPAREN (*) field_list RPAREN , {RPAREN NOT IN }]
  [field_list ::= (*) LPAREN field_list RPAREN , {RPAREN NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= LPAREN (*) exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= LPAREN (*) query RPAREN compare_op exp , {RPAREN OROR AND OR }]
  [exp ::= (*) lvalue , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {RPAREN OROR AND OR }]
  [const ::= (*) DATEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) NOT conditions , {RPAREN OROR AND OR }]
  [field ::= (*) exp , {COMMA RPAREN NOT IN }]
  [const ::= (*) NULL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) STAR , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= LPAREN (*) query RPAREN compare_op LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) condition , {RPAREN OROR AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= LPAREN (*) query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp STAR exp , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= (*) exp IS NULL , {RPAREN OROR AND OR }]
  [conditions ::= LPAREN (*) conditions RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {RPAREN OROR AND OR }]
  [field ::= (*) exp AS ID , {COMMA RPAREN NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) function , {COMMA RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [conditions ::= (*) conditions AND conditions , {RPAREN OROR AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [117]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [116]
transition on TRUE to state [30]
transition on exp to state [115]
transition on conditions to state [114]
transition on function to state [50]
transition on query to state [119]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on SELECT to state [3]
transition on field to state [45]

-------------------
lalr_state [117]: {
  [field_list ::= LPAREN field_list (*) RPAREN , {RPAREN NOT IN }]
  [condition ::= field_list (*) IN LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [condition ::= field_list (*) NOT IN LPAREN query RPAREN , {RPAREN OROR AND OR }]
}
transition on NOT to state [81]
transition on RPAREN to state [118]
transition on IN to state [80]

-------------------
lalr_state [118]: {
  [field_list ::= LPAREN field_list RPAREN (*) , {RPAREN FROM NOT IN }]
}

-------------------
lalr_state [119]: {
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= LPAREN query (*) RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= LPAREN query (*) RPAREN compare_op exp , {RPAREN OROR AND OR }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= LPAREN query (*) RPAREN compare_op LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on RPAREN to state [120]
transition on EXCEPT to state [86]

-------------------
lalr_state [120]: {
  [compare_op ::= (*) EQ , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [query ::= LPAREN query RPAREN (*) , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= LPAREN query RPAREN (*) compare_op exp , {RPAREN OROR AND OR }]
  [compare_op ::= (*) LE , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) GT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) LT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) NEQ , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= LPAREN query RPAREN (*) compare_op LPAREN query RPAREN , {RPAREN OROR AND OR }]
  [compare_op ::= (*) GE , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}
transition on compare_op to state [127]
transition on NEQ to state [126]
transition on GE to state [125]
transition on LE to state [124]
transition on GT to state [123]
transition on EQ to state [122]
transition on LT to state [121]

-------------------
lalr_state [121]: {
  [compare_op ::= LT (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}

-------------------
lalr_state [122]: {
  [compare_op ::= EQ (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}

-------------------
lalr_state [123]: {
  [compare_op ::= GT (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}

-------------------
lalr_state [124]: {
  [compare_op ::= LE (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}

-------------------
lalr_state [125]: {
  [compare_op ::= GE (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}

-------------------
lalr_state [126]: {
  [compare_op ::= NEQ (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR ANY ALL NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}

-------------------
lalr_state [127]: {
  [lvalue ::= (*) ID DOT ID , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) NULL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp PLUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) LPAREN exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= LPAREN query RPAREN compare_op (*) LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TRUE , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATE DATEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMESTAMPVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) function , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp DIVIDE exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) INTVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) UNKNOWN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) lvalue , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp MINUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [lvalue ::= (*) ID , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) FALSE , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) const , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp OROR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= LPAREN query RPAREN compare_op (*) exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) STRING , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DOUBLEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) STAR , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp STAR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [129]
transition on exp to state [128]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [128]: {
  [exp ::= exp (*) STAR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= LPAREN query RPAREN compare_op exp (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) OROR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) MINUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) DIVIDE exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) PLUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on STAR to state [68]

-------------------
lalr_state [129]: {
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= LPAREN (*) exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [condition ::= LPAREN query RPAREN compare_op LPAREN (*) query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [131]
transition on TRUE to state [30]
transition on exp to state [67]
transition on function to state [50]
transition on query to state [130]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on SELECT to state [3]

-------------------
lalr_state [130]: {
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= LPAREN query RPAREN compare_op LPAREN query (*) RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]
transition on RPAREN to state [134]

-------------------
lalr_state [131]: {
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= LPAREN (*) exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= LPAREN (*) query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [131]
transition on TRUE to state [30]
transition on exp to state [67]
transition on function to state [50]
transition on query to state [132]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on SELECT to state [3]

-------------------
lalr_state [132]: {
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= LPAREN query (*) RPAREN , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]
transition on RPAREN to state [133]

-------------------
lalr_state [133]: {
  [query ::= LPAREN query RPAREN (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [134]: {
  [condition ::= LPAREN query RPAREN compare_op LPAREN query RPAREN (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [135]: {
  [condition ::= exp compare_op (*) exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [lvalue ::= (*) ID DOT ID , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp compare_op (*) ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) NULL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp PLUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) LPAREN exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TRUE , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATE DATEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMESTAMPVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) function , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp DIVIDE exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp compare_op (*) LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) INTVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) UNKNOWN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) lvalue , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp MINUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [lvalue ::= (*) ID , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp compare_op (*) ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) FALSE , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) const , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp OROR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) STRING , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DOUBLEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) STAR , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp STAR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on ANY to state [149]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [148]
transition on exp to state [147]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on ALL to state [146]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [136]: {
  [lvalue ::= (*) ID DOT ID , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) NULL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [condition ::= exp BETWEEN (*) exp AND exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) exp PLUS exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) LPAREN exp RPAREN , {STAR PLUS MINUS DIVIDE OROR AND }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) TRUE , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) DATE DATEVAL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) TIMESTAMPVAL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) function , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) exp DIVIDE exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) INTVAL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) UNKNOWN , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) TIMEVAL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) lvalue , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) exp MINUS exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {STAR PLUS MINUS DIVIDE OROR AND }]
  [lvalue ::= (*) ID , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) FALSE , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) DATEVAL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) const , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) exp OROR exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) STRING , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) DOUBLEVAL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) STAR , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= (*) exp STAR exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {STAR PLUS MINUS DIVIDE OROR AND }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [143]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [137]: {
  [field ::= exp AS (*) ID , {COMMA RPAREN FROM NOT IN }]
}
transition on ID to state [142]

-------------------
lalr_state [138]: {
  [condition ::= exp IS (*) NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp IS (*) NOT NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on NULL to state [140]
transition on NOT to state [139]

-------------------
lalr_state [139]: {
  [condition ::= exp IS NOT (*) NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on NULL to state [141]

-------------------
lalr_state [140]: {
  [condition ::= exp IS NULL (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [141]: {
  [condition ::= exp IS NOT NULL (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [142]: {
  [field ::= exp AS ID (*) , {COMMA RPAREN FROM NOT IN }]
}

-------------------
lalr_state [143]: {
  [exp ::= exp (*) STAR exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= exp (*) OROR exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= exp (*) MINUS exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [condition ::= exp BETWEEN exp (*) AND exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) DIVIDE exp , {STAR PLUS MINUS DIVIDE OROR AND }]
  [exp ::= exp (*) PLUS exp , {STAR PLUS MINUS DIVIDE OROR AND }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on AND to state [144]
transition on STAR to state [68]

-------------------
lalr_state [144]: {
  [condition ::= exp BETWEEN exp AND (*) exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [lvalue ::= (*) ID DOT ID , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) NULL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp PLUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) LPAREN exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TRUE , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATE DATEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMESTAMPVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) function , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp DIVIDE exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) INTVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) UNKNOWN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) lvalue , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp MINUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [lvalue ::= (*) ID , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) FALSE , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) const , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp OROR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) STRING , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DOUBLEVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) STAR , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp STAR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [145]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [145]: {
  [exp ::= exp (*) STAR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp BETWEEN exp AND exp (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) OROR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) MINUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) DIVIDE exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) PLUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on STAR to state [68]

-------------------
lalr_state [146]: {
  [condition ::= exp compare_op ALL (*) LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on LPAREN to state [155]

-------------------
lalr_state [147]: {
  [exp ::= exp (*) STAR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= exp compare_op exp (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) OROR exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) MINUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) DIVIDE exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= exp (*) PLUS exp , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on STAR to state [68]

-------------------
lalr_state [148]: {
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= exp compare_op LPAREN (*) query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= LPAREN (*) exp RPAREN , {SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [131]
transition on TRUE to state [30]
transition on exp to state [67]
transition on function to state [50]
transition on query to state [153]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on SELECT to state [3]

-------------------
lalr_state [149]: {
  [condition ::= exp compare_op ANY (*) LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on LPAREN to state [150]

-------------------
lalr_state [150]: {
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= exp compare_op ANY LPAREN (*) query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [151]

-------------------
lalr_state [151]: {
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= exp compare_op ANY LPAREN query (*) RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]
transition on RPAREN to state [152]

-------------------
lalr_state [152]: {
  [condition ::= exp compare_op ANY LPAREN query RPAREN (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [153]: {
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= exp compare_op LPAREN query (*) RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]
transition on RPAREN to state [154]

-------------------
lalr_state [154]: {
  [condition ::= exp compare_op LPAREN query RPAREN (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [155]: {
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= exp compare_op ALL LPAREN (*) query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [156]

-------------------
lalr_state [156]: {
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [condition ::= exp compare_op ALL LPAREN query (*) RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on RPAREN to state [157]
transition on EXCEPT to state [86]

-------------------
lalr_state [157]: {
  [condition ::= exp compare_op ALL LPAREN query RPAREN (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [158]: {
  [conditions ::= LPAREN conditions RPAREN (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}

-------------------
lalr_state [159]: {
  [field_list ::= (*) field , {NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) field COMMA field_list , {NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp BETWEEN exp AND exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) LPAREN field_list RPAREN , {NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) NOT conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp , {COMMA NOT IN }]
  [const ::= (*) NULL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) condition , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp AS ID , {COMMA NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [conditions ::= conditions AND (*) conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) function , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [58]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [53]
transition on TRUE to state [30]
transition on exp to state [52]
transition on conditions to state [164]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [160]: {
  [field_list ::= (*) field , {NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) field COMMA field_list , {NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp BETWEEN exp AND exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [conditions ::= conditions OROR (*) conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [exp ::= (*) exp PLUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) LPAREN field_list RPAREN , {NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) NOT conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp , {COMMA NOT IN }]
  [const ::= (*) NULL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) condition , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp AS ID , {COMMA NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) function , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [58]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [53]
transition on TRUE to state [30]
transition on exp to state [52]
transition on conditions to state [163]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [161]: {
  [field_list ::= (*) field , {NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [conditions ::= conditions OR (*) conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) field COMMA field_list , {NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp BETWEEN exp AND exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field_list ::= (*) LPAREN field_list RPAREN , {NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) NOT conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp , {COMMA NOT IN }]
  [const ::= (*) NULL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) condition , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NULL , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [field ::= (*) exp AS ID , {COMMA NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) function , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= (*) conditions AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [58]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [53]
transition on TRUE to state [30]
transition on exp to state [52]
transition on conditions to state [162]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [162]: {
  [conditions ::= conditions (*) AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions OR conditions (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on OR to state [161]
transition on OROR to state [160]
transition on AND to state [159]

-------------------
lalr_state [163]: {
  [conditions ::= conditions (*) AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions OROR conditions (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on OR to state [161]
transition on OROR to state [160]
transition on AND to state [159]

-------------------
lalr_state [164]: {
  [conditions ::= conditions (*) AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions AND conditions (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on OR to state [161]
transition on OROR to state [160]
transition on AND to state [159]

-------------------
lalr_state [165]: {
  [compare_op ::= (*) LE , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) GT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= LPAREN query RPAREN (*) compare_op exp , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [compare_op ::= (*) LT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) NEQ , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) GE , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [compare_op ::= (*) EQ , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [condition ::= LPAREN query RPAREN (*) compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on compare_op to state [127]
transition on NEQ to state [126]
transition on GE to state [125]
transition on LE to state [124]
transition on GT to state [123]
transition on LT to state [121]
transition on EQ to state [122]

-------------------
lalr_state [166]: {
  [conditions ::= conditions (*) AND conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OROR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= conditions (*) OR conditions , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
  [conditions ::= NOT conditions (*) , {SEMICOLON RPAREN OROR GROUP ORDER UNION INTERSECT EXCEPT HAVING AND OR }]
}
transition on OR to state [161]
transition on OROR to state [160]
transition on AND to state [159]

-------------------
lalr_state [167]: {
  [function ::= SUM LPAREN (*) distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [distinct_part ::= (*) DISTINCT , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [empty ::= (*) , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
  [distinct_part ::= (*) empty , {ID STRING DATEVAL TIMEVAL TIMESTAMPVAL INTVAL DOUBLEVAL LPAREN STAR NULL TRUE FALSE UNKNOWN COUNT SUM AVG MIN MAX DATE TIME TIMESTAMP }]
}
transition on distinct_part to state [168]
transition on empty to state [63]
transition on DISTINCT to state [62]

-------------------
lalr_state [168]: {
  [lvalue ::= (*) ID DOT ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) NULL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIME TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) LPAREN exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TRUE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATE DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) function , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) INTVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) UNKNOWN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) lvalue , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [lvalue ::= (*) ID , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) FALSE , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DATEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) const , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) STRING , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) DOUBLEVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= SUM LPAREN distinct_part (*) exp RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
  [exp ::= (*) STAR , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= (*) exp STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [169]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [169]: {
  [exp ::= exp (*) STAR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) OROR exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) MINUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) DIVIDE exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [exp ::= exp (*) PLUS exp , {RPAREN STAR PLUS MINUS DIVIDE OROR }]
  [function ::= SUM LPAREN distinct_part exp (*) RPAREN , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on RPAREN to state [170]
transition on STAR to state [68]

-------------------
lalr_state [170]: {
  [function ::= SUM LPAREN distinct_part exp RPAREN (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [171]: {
  [field_list ::= (*) field , {RPAREN FROM NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [const ::= (*) STRING , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [const ::= (*) DOUBLEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) const , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [field_list ::= field COMMA (*) field_list , {RPAREN FROM NOT IN }]
  [field_list ::= (*) field COMMA field_list , {RPAREN FROM NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [const ::= (*) TRUE , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) exp OROR exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [const ::= (*) DATE DATEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [lvalue ::= (*) ID , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) exp PLUS exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [field_list ::= (*) LPAREN field_list RPAREN , {RPAREN FROM NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [const ::= (*) FALSE , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) lvalue , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [const ::= (*) DATEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [lvalue ::= (*) ID DOT ID , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) exp MINUS exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [field ::= (*) exp , {COMMA RPAREN FROM NOT IN }]
  [const ::= (*) NULL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) STAR , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [const ::= (*) TIME TIMEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [const ::= (*) INTVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) exp STAR exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [field ::= (*) exp AS ID , {COMMA RPAREN FROM NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) function , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [174]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [173]
transition on TRUE to state [30]
transition on exp to state [172]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [172]: {
  [exp ::= exp (*) STAR exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= exp (*) OROR exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [field ::= exp (*) AS ID , {COMMA RPAREN FROM NOT IN }]
  [exp ::= exp (*) MINUS exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= exp (*) DIVIDE exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [field ::= exp (*) , {COMMA RPAREN FROM NOT IN }]
  [exp ::= exp (*) PLUS exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on AS to state [137]
transition on STAR to state [68]

-------------------
lalr_state [173]: {
  [field_list ::= (*) field , {RPAREN }]
  [const ::= (*) TIMEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [const ::= (*) STRING , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [const ::= (*) DOUBLEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) const , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [field_list ::= (*) field COMMA field_list , {RPAREN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [const ::= (*) TRUE , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) exp OROR exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [const ::= (*) DATE DATEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [lvalue ::= (*) ID , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) exp PLUS exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [field_list ::= LPAREN (*) field_list RPAREN , {RPAREN FROM NOT IN }]
  [field_list ::= (*) LPAREN field_list RPAREN , {RPAREN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [const ::= (*) FALSE , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= LPAREN (*) exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) lvalue , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [const ::= (*) DATEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [lvalue ::= (*) ID DOT ID , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) exp MINUS exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [field ::= (*) exp , {COMMA RPAREN }]
  [const ::= (*) NULL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) STAR , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [const ::= (*) TIME TIMEVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [const ::= (*) INTVAL , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) exp STAR exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [field ::= (*) exp AS ID , {COMMA RPAREN }]
  [const ::= (*) UNKNOWN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= (*) function , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [176]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [173]
transition on TRUE to state [30]
transition on exp to state [175]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [174]: {
  [field_list ::= field COMMA field_list (*) , {RPAREN FROM NOT IN }]
}

-------------------
lalr_state [175]: {
  [exp ::= exp (*) STAR exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= exp (*) OROR exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [field ::= exp (*) AS ID , {COMMA RPAREN }]
  [exp ::= exp (*) MINUS exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= exp (*) DIVIDE exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [field ::= exp (*) , {COMMA RPAREN }]
  [exp ::= exp (*) PLUS exp , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR AS }]
  [exp ::= LPAREN exp (*) RPAREN , {COMMA RPAREN STAR PLUS MINUS DIVIDE OROR FROM NOT IN AS }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on AS to state [137]
transition on RPAREN to state [69]
transition on STAR to state [68]

-------------------
lalr_state [176]: {
  [field_list ::= LPAREN field_list (*) RPAREN , {RPAREN FROM NOT IN }]
}
transition on RPAREN to state [118]

-------------------
lalr_state [177]: {
  [const ::= DATE DATEVAL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [178]: {
  [const ::= TIME TIMEVAL (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM WHERE GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [179]: {
  [lvalue ::= ID DOT (*) ID , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}
transition on ID to state [180]

-------------------
lalr_state [180]: {
  [lvalue ::= ID DOT ID (*) , {COMMA SEMICOLON RPAREN STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR FROM GROUP ORDER DESC UNION INTERSECT EXCEPT HAVING BETWEEN AND OR NOT IN AS IS }]
}

-------------------
lalr_state [181]: {
  [update ::= UPDATE ID AS ID (*) SET lvalue EQ const where_part , {SEMICOLON }]
}
transition on SET to state [182]

-------------------
lalr_state [182]: {
  [lvalue ::= (*) ID DOT ID , {EQ }]
  [lvalue ::= (*) ID , {EQ }]
  [update ::= UPDATE ID AS ID SET (*) lvalue EQ const where_part , {SEMICOLON }]
}
transition on ID to state [24]
transition on lvalue to state [183]

-------------------
lalr_state [183]: {
  [update ::= UPDATE ID AS ID SET lvalue (*) EQ const where_part , {SEMICOLON }]
}
transition on EQ to state [184]

-------------------
lalr_state [184]: {
  [const ::= (*) DATEVAL , {SEMICOLON WHERE }]
  [const ::= (*) UNKNOWN , {SEMICOLON WHERE }]
  [const ::= (*) TRUE , {SEMICOLON WHERE }]
  [update ::= UPDATE ID AS ID SET lvalue EQ (*) const where_part , {SEMICOLON }]
  [const ::= (*) TIMEVAL , {SEMICOLON WHERE }]
  [const ::= (*) DATE DATEVAL , {SEMICOLON WHERE }]
  [const ::= (*) NULL , {SEMICOLON WHERE }]
  [const ::= (*) STRING , {SEMICOLON WHERE }]
  [const ::= (*) TIMESTAMPVAL , {SEMICOLON WHERE }]
  [const ::= (*) TIME TIMEVAL , {SEMICOLON WHERE }]
  [const ::= (*) DOUBLEVAL , {SEMICOLON WHERE }]
  [const ::= (*) FALSE , {SEMICOLON WHERE }]
  [const ::= (*) INTVAL , {SEMICOLON WHERE }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {SEMICOLON WHERE }]
}
transition on TIMEVAL to state [40]
transition on TIMESTAMP to state [39]
transition on UNKNOWN to state [38]
transition on DOUBLEVAL to state [37]
transition on FALSE to state [36]
transition on INTVAL to state [35]
transition on STRING to state [34]
transition on TIMESTAMPVAL to state [33]
transition on DATEVAL to state [32]
transition on NULL to state [31]
transition on TRUE to state [30]
transition on const to state [185]
transition on DATE to state [28]
transition on TIME to state [27]

-------------------
lalr_state [185]: {
  [where_part ::= (*) WHERE conditions , {SEMICOLON }]
  [update ::= UPDATE ID AS ID SET lvalue EQ const (*) where_part , {SEMICOLON }]
  [empty ::= (*) , {SEMICOLON }]
  [where_part ::= (*) empty , {SEMICOLON }]
}
transition on empty to state [44]
transition on where_part to state [186]
transition on WHERE to state [42]

-------------------
lalr_state [186]: {
  [update ::= UPDATE ID AS ID SET lvalue EQ const where_part (*) , {SEMICOLON }]
}

-------------------
lalr_state [187]: {
  [stm ::= DELETE FROM (*) ID where_part , {SEMICOLON }]
}
transition on ID to state [188]

-------------------
lalr_state [188]: {
  [where_part ::= (*) WHERE conditions , {SEMICOLON }]
  [empty ::= (*) , {SEMICOLON }]
  [where_part ::= (*) empty , {SEMICOLON }]
  [stm ::= DELETE FROM ID (*) where_part , {SEMICOLON }]
}
transition on empty to state [44]
transition on where_part to state [189]
transition on WHERE to state [42]

-------------------
lalr_state [189]: {
  [stm ::= DELETE FROM ID where_part (*) , {SEMICOLON }]
}

-------------------
lalr_state [190]: {
  [stm ::= USE ID (*) , {SEMICOLON }]
}

-------------------
lalr_state [191]: {
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [alter ::= (*) ALTER TABLE ID ADD LPAREN attr_list RPAREN , {SEMICOLON }]
  [stm ::= (*) insert , {SEMICOLON }]
  [stm ::= (*) empty , {SEMICOLON }]
  [empty ::= (*) , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= (*) INSERT INTO ID LPAREN id_list RPAREN query , {SEMICOLON }]
  [stm ::= (*) DROP VIEW id_list , {SEMICOLON }]
  [stm ::= (*) SHOW VIEW , {SEMICOLON }]
  [query ::= (*) query EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [alter ::= (*) ALTER TABLE ID DROP id_list , {SEMICOLON }]
  [stm ::= (*) update , {SEMICOLON }]
  [stm ::= (*) CREATE DATABASE ID , {SEMICOLON }]
  [query ::= (*) query UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [update ::= (*) UPDATE ID SET lvalue EQ const where_part , {SEMICOLON }]
  [stm ::= (*) CREATE INDEX ID ON ID LPAREN id_list RPAREN , {SEMICOLON }]
  [stm ::= (*) CREATE TABLE ID LPAREN attr_list RPAREN , {SEMICOLON }]
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= (*) INSERT INTO ID VALUES values_part , {SEMICOLON }]
  [stm ::= (*) DELETE FROM ID where_part , {SEMICOLON }]
  [stm ::= (*) DROP DATABASE ID , {SEMICOLON }]
  [query ::= (*) query UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [update ::= (*) UPDATE ID AS ID SET lvalue EQ const where_part , {SEMICOLON }]
  [stm ::= (*) DROP INDEX ID ON ID , {SEMICOLON }]
  [stm_list ::= stm SEMICOLON (*) , {EOF }]
  [stm ::= (*) DROP TABLE id_list , {SEMICOLON }]
  [stm_list ::= (*) stm SEMICOLON , {EOF }]
  [create_view ::= (*) CREATE VIEW ID AS query , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= (*) INSERT INTO ID query , {SEMICOLON }]
  [stm ::= (*) query , {SEMICOLON }]
  [stm ::= (*) USE ID , {SEMICOLON }]
  [query ::= (*) query INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON UNION INTERSECT EXCEPT }]
  [alter ::= (*) ALTER TABLE ID ADD attr , {SEMICOLON }]
  [stm_list ::= stm SEMICOLON (*) stm_list , {EOF }]
  [stm ::= (*) alter , {SEMICOLON }]
  [stm_list ::= (*) stm SEMICOLON stm_list , {EOF }]
  [create_view ::= (*) CREATE VIEW ID LPAREN id_list RPAREN AS query , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= (*) INSERT INTO ID LPAREN id_list RPAREN VALUES values_part , {SEMICOLON }]
  [stm ::= (*) create_view , {SEMICOLON }]
  [stm ::= (*) SHOW TABLE , {SEMICOLON }]
}
transition on UPDATE to state [18]
transition on DELETE to state [17]
transition on USE to state [16]
transition on stm to state [15]
transition on stm_list to state [193]
transition on DROP to state [13]
transition on ALTER to state [12]
transition on INSERT to state [11]
transition on CREATE to state [10]
transition on empty to state [192]
transition on update to state [8]
transition on LPAREN to state [7]
transition on query to state [6]
transition on create_view to state [5]
transition on SHOW to state [4]
transition on SELECT to state [3]
transition on alter to state [2]
transition on insert to state [1]

-------------------
lalr_state [192]: {
  [stm ::= empty (*) , {SEMICOLON }]
}

-------------------
lalr_state [193]: {
  [stm_list ::= stm SEMICOLON stm_list (*) , {EOF }]
}

-------------------
lalr_state [194]: {
  [stm ::= DROP INDEX (*) ID ON ID , {SEMICOLON }]
}
transition on ID to state [204]

-------------------
lalr_state [195]: {
  [stm ::= DROP DATABASE (*) ID , {SEMICOLON }]
}
transition on ID to state [203]

-------------------
lalr_state [196]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON }]
  [id_list ::= (*) lvalue , {SEMICOLON }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON }]
  [stm ::= DROP VIEW (*) id_list , {SEMICOLON }]
  [id_list ::= (*) lvalue COMMA id_list , {SEMICOLON }]
}
transition on id_list to state [202]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [197]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON }]
  [id_list ::= (*) lvalue , {SEMICOLON }]
  [stm ::= DROP TABLE (*) id_list , {SEMICOLON }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON }]
  [id_list ::= (*) lvalue COMMA id_list , {SEMICOLON }]
}
transition on id_list to state [199]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [198]: {
  [id_list ::= lvalue (*) , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [id_list ::= lvalue (*) COMMA id_list , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on COMMA to state [200]

-------------------
lalr_state [199]: {
  [stm ::= DROP TABLE id_list (*) , {SEMICOLON }]
}

-------------------
lalr_state [200]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [id_list ::= (*) lvalue , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [id_list ::= lvalue COMMA (*) id_list , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [id_list ::= (*) lvalue COMMA id_list , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on id_list to state [201]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [201]: {
  [id_list ::= lvalue COMMA id_list (*) , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [202]: {
  [stm ::= DROP VIEW id_list (*) , {SEMICOLON }]
}

-------------------
lalr_state [203]: {
  [stm ::= DROP DATABASE ID (*) , {SEMICOLON }]
}

-------------------
lalr_state [204]: {
  [stm ::= DROP INDEX ID (*) ON ID , {SEMICOLON }]
}
transition on ON to state [205]

-------------------
lalr_state [205]: {
  [stm ::= DROP INDEX ID ON (*) ID , {SEMICOLON }]
}
transition on ID to state [206]

-------------------
lalr_state [206]: {
  [stm ::= DROP INDEX ID ON ID (*) , {SEMICOLON }]
}

-------------------
lalr_state [207]: {
  [alter ::= ALTER TABLE (*) ID DROP id_list , {SEMICOLON }]
  [alter ::= ALTER TABLE (*) ID ADD LPAREN attr_list RPAREN , {SEMICOLON }]
  [alter ::= ALTER TABLE (*) ID ADD attr , {SEMICOLON }]
}
transition on ID to state [208]

-------------------
lalr_state [208]: {
  [alter ::= ALTER TABLE ID (*) ADD LPAREN attr_list RPAREN , {SEMICOLON }]
  [alter ::= ALTER TABLE ID (*) ADD attr , {SEMICOLON }]
  [alter ::= ALTER TABLE ID (*) DROP id_list , {SEMICOLON }]
}
transition on DROP to state [210]
transition on ADD to state [209]

-------------------
lalr_state [209]: {
  [attr ::= (*) ID type UNIQUE , {SEMICOLON }]
  [attr ::= (*) ID type NOT NULL , {SEMICOLON }]
  [alter ::= ALTER TABLE ID ADD (*) LPAREN attr_list RPAREN , {SEMICOLON }]
  [attr ::= (*) ID type PRIMARY KEY , {SEMICOLON }]
  [attr ::= (*) ID type , {SEMICOLON }]
  [alter ::= ALTER TABLE ID ADD (*) attr , {SEMICOLON }]
  [attr ::= (*) PRIMARY KEY LPAREN id_list RPAREN , {SEMICOLON }]
  [attr ::= (*) ID type DEFAULT const , {SEMICOLON }]
}
transition on LPAREN to state [215]
transition on PRIMARY to state [214]
transition on ID to state [213]
transition on attr to state [212]

-------------------
lalr_state [210]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON }]
  [id_list ::= (*) lvalue , {SEMICOLON }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON }]
  [alter ::= ALTER TABLE ID DROP (*) id_list , {SEMICOLON }]
  [id_list ::= (*) lvalue COMMA id_list , {SEMICOLON }]
}
transition on id_list to state [211]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [211]: {
  [alter ::= ALTER TABLE ID DROP id_list (*) , {SEMICOLON }]
}

-------------------
lalr_state [212]: {
  [alter ::= ALTER TABLE ID ADD attr (*) , {SEMICOLON }]
}

-------------------
lalr_state [213]: {
  [type ::= (*) TIME , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [type ::= (*) DECIMAL LPAREN INTVAL COMMA INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [attr ::= ID (*) type PRIMARY KEY , {COMMA SEMICOLON RPAREN }]
  [type ::= (*) CHAR , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [attr ::= ID (*) type , {COMMA SEMICOLON RPAREN }]
  [type ::= (*) DATE , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [attr ::= ID (*) type DEFAULT const , {COMMA SEMICOLON RPAREN }]
  [type ::= (*) VARCHAR LPAREN INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [type ::= (*) INT , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [type ::= (*) DOUBLE , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [attr ::= ID (*) type UNIQUE , {COMMA SEMICOLON RPAREN }]
  [type ::= (*) CHAR LPAREN INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [attr ::= ID (*) type NOT NULL , {COMMA SEMICOLON RPAREN }]
  [type ::= (*) BOOLEAN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on CHAR to state [233]
transition on type to state [232]
transition on DOUBLE to state [231]
transition on VARCHAR to state [230]
transition on BOOLEAN to state [229]
transition on TIME to state [228]
transition on DATE to state [227]
transition on DECIMAL to state [226]
transition on INT to state [225]

-------------------
lalr_state [214]: {
  [attr ::= PRIMARY (*) KEY LPAREN id_list RPAREN , {COMMA SEMICOLON RPAREN }]
}
transition on KEY to state [221]

-------------------
lalr_state [215]: {
  [attr ::= (*) ID type PRIMARY KEY , {COMMA RPAREN }]
  [attr ::= (*) ID type , {COMMA RPAREN }]
  [attr ::= (*) PRIMARY KEY LPAREN id_list RPAREN , {COMMA RPAREN }]
  [attr ::= (*) ID type DEFAULT const , {COMMA RPAREN }]
  [attr_list ::= (*) attr COMMA attr_list , {RPAREN }]
  [alter ::= ALTER TABLE ID ADD LPAREN (*) attr_list RPAREN , {SEMICOLON }]
  [attr ::= (*) ID type UNIQUE , {COMMA RPAREN }]
  [attr ::= (*) ID type NOT NULL , {COMMA RPAREN }]
  [attr_list ::= (*) attr , {RPAREN }]
}
transition on PRIMARY to state [214]
transition on attr_list to state [217]
transition on ID to state [213]
transition on attr to state [216]

-------------------
lalr_state [216]: {
  [attr_list ::= attr (*) , {RPAREN }]
  [attr_list ::= attr (*) COMMA attr_list , {RPAREN }]
}
transition on COMMA to state [219]

-------------------
lalr_state [217]: {
  [alter ::= ALTER TABLE ID ADD LPAREN attr_list (*) RPAREN , {SEMICOLON }]
}
transition on RPAREN to state [218]

-------------------
lalr_state [218]: {
  [alter ::= ALTER TABLE ID ADD LPAREN attr_list RPAREN (*) , {SEMICOLON }]
}

-------------------
lalr_state [219]: {
  [attr ::= (*) ID type PRIMARY KEY , {COMMA RPAREN }]
  [attr ::= (*) ID type , {COMMA RPAREN }]
  [attr_list ::= attr COMMA (*) attr_list , {RPAREN }]
  [attr ::= (*) PRIMARY KEY LPAREN id_list RPAREN , {COMMA RPAREN }]
  [attr ::= (*) ID type DEFAULT const , {COMMA RPAREN }]
  [attr_list ::= (*) attr COMMA attr_list , {RPAREN }]
  [attr ::= (*) ID type UNIQUE , {COMMA RPAREN }]
  [attr ::= (*) ID type NOT NULL , {COMMA RPAREN }]
  [attr_list ::= (*) attr , {RPAREN }]
}
transition on attr_list to state [220]
transition on PRIMARY to state [214]
transition on ID to state [213]
transition on attr to state [216]

-------------------
lalr_state [220]: {
  [attr_list ::= attr COMMA attr_list (*) , {RPAREN }]
}

-------------------
lalr_state [221]: {
  [attr ::= PRIMARY KEY (*) LPAREN id_list RPAREN , {COMMA SEMICOLON RPAREN }]
}
transition on LPAREN to state [222]

-------------------
lalr_state [222]: {
  [lvalue ::= (*) ID DOT ID , {COMMA RPAREN }]
  [id_list ::= (*) lvalue , {RPAREN }]
  [attr ::= PRIMARY KEY LPAREN (*) id_list RPAREN , {COMMA SEMICOLON RPAREN }]
  [lvalue ::= (*) ID , {COMMA RPAREN }]
  [id_list ::= (*) lvalue COMMA id_list , {RPAREN }]
}
transition on id_list to state [223]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [223]: {
  [attr ::= PRIMARY KEY LPAREN id_list (*) RPAREN , {COMMA SEMICOLON RPAREN }]
}
transition on RPAREN to state [224]

-------------------
lalr_state [224]: {
  [attr ::= PRIMARY KEY LPAREN id_list RPAREN (*) , {COMMA SEMICOLON RPAREN }]
}

-------------------
lalr_state [225]: {
  [type ::= INT (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}

-------------------
lalr_state [226]: {
  [type ::= DECIMAL (*) LPAREN INTVAL COMMA INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on LPAREN to state [247]

-------------------
lalr_state [227]: {
  [type ::= DATE (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}

-------------------
lalr_state [228]: {
  [type ::= TIME (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}

-------------------
lalr_state [229]: {
  [type ::= BOOLEAN (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}

-------------------
lalr_state [230]: {
  [type ::= VARCHAR (*) LPAREN INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on LPAREN to state [244]

-------------------
lalr_state [231]: {
  [type ::= DOUBLE (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}

-------------------
lalr_state [232]: {
  [attr ::= ID type (*) PRIMARY KEY , {COMMA SEMICOLON RPAREN }]
  [attr ::= ID type (*) , {COMMA SEMICOLON RPAREN }]
  [attr ::= ID type (*) DEFAULT const , {COMMA SEMICOLON RPAREN }]
  [attr ::= ID type (*) UNIQUE , {COMMA SEMICOLON RPAREN }]
  [attr ::= ID type (*) NOT NULL , {COMMA SEMICOLON RPAREN }]
}
transition on UNIQUE to state [240]
transition on NOT to state [239]
transition on PRIMARY to state [238]
transition on DEFAULT to state [237]

-------------------
lalr_state [233]: {
  [type ::= CHAR (*) LPAREN INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
  [type ::= CHAR (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on LPAREN to state [234]

-------------------
lalr_state [234]: {
  [type ::= CHAR LPAREN (*) INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on INTVAL to state [235]

-------------------
lalr_state [235]: {
  [type ::= CHAR LPAREN INTVAL (*) RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on RPAREN to state [236]

-------------------
lalr_state [236]: {
  [type ::= CHAR LPAREN INTVAL RPAREN (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}

-------------------
lalr_state [237]: {
  [const ::= (*) DATEVAL , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) UNKNOWN , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) TRUE , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) TIMEVAL , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) DATE DATEVAL , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) NULL , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) STRING , {COMMA SEMICOLON RPAREN }]
  [attr ::= ID type DEFAULT (*) const , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) TIME TIMEVAL , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) DOUBLEVAL , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) FALSE , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) INTVAL , {COMMA SEMICOLON RPAREN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA SEMICOLON RPAREN }]
}
transition on TIMEVAL to state [40]
transition on TIMESTAMP to state [39]
transition on UNKNOWN to state [38]
transition on DOUBLEVAL to state [37]
transition on FALSE to state [36]
transition on INTVAL to state [35]
transition on STRING to state [34]
transition on TIMESTAMPVAL to state [33]
transition on DATEVAL to state [32]
transition on NULL to state [31]
transition on TRUE to state [30]
transition on const to state [243]
transition on DATE to state [28]
transition on TIME to state [27]

-------------------
lalr_state [238]: {
  [attr ::= ID type PRIMARY (*) KEY , {COMMA SEMICOLON RPAREN }]
}
transition on KEY to state [242]

-------------------
lalr_state [239]: {
  [attr ::= ID type NOT (*) NULL , {COMMA SEMICOLON RPAREN }]
}
transition on NULL to state [241]

-------------------
lalr_state [240]: {
  [attr ::= ID type UNIQUE (*) , {COMMA SEMICOLON RPAREN }]
}

-------------------
lalr_state [241]: {
  [attr ::= ID type NOT NULL (*) , {COMMA SEMICOLON RPAREN }]
}

-------------------
lalr_state [242]: {
  [attr ::= ID type PRIMARY KEY (*) , {COMMA SEMICOLON RPAREN }]
}

-------------------
lalr_state [243]: {
  [attr ::= ID type DEFAULT const (*) , {COMMA SEMICOLON RPAREN }]
}

-------------------
lalr_state [244]: {
  [type ::= VARCHAR LPAREN (*) INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on INTVAL to state [245]

-------------------
lalr_state [245]: {
  [type ::= VARCHAR LPAREN INTVAL (*) RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on RPAREN to state [246]

-------------------
lalr_state [246]: {
  [type ::= VARCHAR LPAREN INTVAL RPAREN (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}

-------------------
lalr_state [247]: {
  [type ::= DECIMAL LPAREN (*) INTVAL COMMA INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on INTVAL to state [248]

-------------------
lalr_state [248]: {
  [type ::= DECIMAL LPAREN INTVAL (*) COMMA INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on COMMA to state [249]

-------------------
lalr_state [249]: {
  [type ::= DECIMAL LPAREN INTVAL COMMA (*) INTVAL RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on INTVAL to state [250]

-------------------
lalr_state [250]: {
  [type ::= DECIMAL LPAREN INTVAL COMMA INTVAL (*) RPAREN , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}
transition on RPAREN to state [251]

-------------------
lalr_state [251]: {
  [type ::= DECIMAL LPAREN INTVAL COMMA INTVAL RPAREN (*) , {COMMA SEMICOLON RPAREN PRIMARY UNIQUE DEFAULT NOT }]
}

-------------------
lalr_state [252]: {
  [insert ::= INSERT INTO (*) ID query , {SEMICOLON }]
  [insert ::= INSERT INTO (*) ID LPAREN id_list RPAREN query , {SEMICOLON }]
  [insert ::= INSERT INTO (*) ID VALUES values_part , {SEMICOLON }]
  [insert ::= INSERT INTO (*) ID LPAREN id_list RPAREN VALUES values_part , {SEMICOLON }]
}
transition on ID to state [253]

-------------------
lalr_state [253]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID (*) LPAREN id_list RPAREN query , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID (*) VALUES values_part , {SEMICOLON }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID (*) LPAREN id_list RPAREN VALUES values_part , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID (*) query , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [256]
transition on query to state [255]
transition on VALUES to state [254]

-------------------
lalr_state [254]: {
  [values_part ::= (*) LPAREN value_list RPAREN , {SEMICOLON }]
  [insert ::= INSERT INTO ID VALUES (*) values_part , {SEMICOLON }]
  [values_part ::= (*) LPAREN value_list RPAREN COMMA values_part , {SEMICOLON }]
}
transition on values_part to state [270]
transition on LPAREN to state [261]

-------------------
lalr_state [255]: {
  [query ::= query (*) UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID query (*) , {SEMICOLON }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [256]: {
  [lvalue ::= (*) ID DOT ID , {COMMA RPAREN }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [id_list ::= (*) lvalue COMMA id_list , {RPAREN }]
  [insert ::= INSERT INTO ID LPAREN (*) id_list RPAREN query , {SEMICOLON }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= LPAREN (*) query RPAREN , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [lvalue ::= (*) ID , {COMMA RPAREN }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID LPAREN (*) id_list RPAREN VALUES values_part , {SEMICOLON }]
  [id_list ::= (*) lvalue , {RPAREN }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [132]
transition on id_list to state [257]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [257]: {
  [insert ::= INSERT INTO ID LPAREN id_list (*) RPAREN query , {SEMICOLON }]
  [insert ::= INSERT INTO ID LPAREN id_list (*) RPAREN VALUES values_part , {SEMICOLON }]
}
transition on RPAREN to state [258]

-------------------
lalr_state [258]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID LPAREN id_list RPAREN (*) VALUES values_part , {SEMICOLON }]
  [query ::= (*) query EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID LPAREN id_list RPAREN (*) query , {SEMICOLON }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [260]
transition on VALUES to state [259]

-------------------
lalr_state [259]: {
  [values_part ::= (*) LPAREN value_list RPAREN , {SEMICOLON }]
  [insert ::= INSERT INTO ID LPAREN id_list RPAREN VALUES (*) values_part , {SEMICOLON }]
  [values_part ::= (*) LPAREN value_list RPAREN COMMA values_part , {SEMICOLON }]
}
transition on values_part to state [262]
transition on LPAREN to state [261]

-------------------
lalr_state [260]: {
  [query ::= query (*) UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [insert ::= INSERT INTO ID LPAREN id_list RPAREN query (*) , {SEMICOLON }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [261]: {
  [const ::= (*) DATEVAL , {COMMA RPAREN }]
  [const ::= (*) UNKNOWN , {COMMA RPAREN }]
  [const ::= (*) TRUE , {COMMA RPAREN }]
  [values_part ::= LPAREN (*) value_list RPAREN , {SEMICOLON }]
  [value_list ::= (*) const COMMA value_list , {RPAREN }]
  [const ::= (*) TIMEVAL , {COMMA RPAREN }]
  [const ::= (*) DATE DATEVAL , {COMMA RPAREN }]
  [const ::= (*) NULL , {COMMA RPAREN }]
  [const ::= (*) STRING , {COMMA RPAREN }]
  [value_list ::= (*) const , {RPAREN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA RPAREN }]
  [const ::= (*) TIME TIMEVAL , {COMMA RPAREN }]
  [const ::= (*) DOUBLEVAL , {COMMA RPAREN }]
  [const ::= (*) FALSE , {COMMA RPAREN }]
  [const ::= (*) INTVAL , {COMMA RPAREN }]
  [values_part ::= LPAREN (*) value_list RPAREN COMMA values_part , {SEMICOLON }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA RPAREN }]
}
transition on TIMEVAL to state [40]
transition on TIMESTAMP to state [39]
transition on value_list to state [264]
transition on UNKNOWN to state [38]
transition on DOUBLEVAL to state [37]
transition on FALSE to state [36]
transition on INTVAL to state [35]
transition on STRING to state [34]
transition on TIMESTAMPVAL to state [33]
transition on DATEVAL to state [32]
transition on NULL to state [31]
transition on TRUE to state [30]
transition on const to state [263]
transition on DATE to state [28]
transition on TIME to state [27]

-------------------
lalr_state [262]: {
  [insert ::= INSERT INTO ID LPAREN id_list RPAREN VALUES values_part (*) , {SEMICOLON }]
}

-------------------
lalr_state [263]: {
  [value_list ::= const (*) , {RPAREN }]
  [value_list ::= const (*) COMMA value_list , {RPAREN }]
}
transition on COMMA to state [268]

-------------------
lalr_state [264]: {
  [values_part ::= LPAREN value_list (*) RPAREN COMMA values_part , {SEMICOLON }]
  [values_part ::= LPAREN value_list (*) RPAREN , {SEMICOLON }]
}
transition on RPAREN to state [265]

-------------------
lalr_state [265]: {
  [values_part ::= LPAREN value_list RPAREN (*) COMMA values_part , {SEMICOLON }]
  [values_part ::= LPAREN value_list RPAREN (*) , {SEMICOLON }]
}
transition on COMMA to state [266]

-------------------
lalr_state [266]: {
  [values_part ::= (*) LPAREN value_list RPAREN , {SEMICOLON }]
  [values_part ::= LPAREN value_list RPAREN COMMA (*) values_part , {SEMICOLON }]
  [values_part ::= (*) LPAREN value_list RPAREN COMMA values_part , {SEMICOLON }]
}
transition on values_part to state [267]
transition on LPAREN to state [261]

-------------------
lalr_state [267]: {
  [values_part ::= LPAREN value_list RPAREN COMMA values_part (*) , {SEMICOLON }]
}

-------------------
lalr_state [268]: {
  [const ::= (*) DATEVAL , {COMMA RPAREN }]
  [const ::= (*) UNKNOWN , {COMMA RPAREN }]
  [const ::= (*) TRUE , {COMMA RPAREN }]
  [value_list ::= const COMMA (*) value_list , {RPAREN }]
  [value_list ::= (*) const COMMA value_list , {RPAREN }]
  [const ::= (*) TIMEVAL , {COMMA RPAREN }]
  [const ::= (*) DATE DATEVAL , {COMMA RPAREN }]
  [const ::= (*) NULL , {COMMA RPAREN }]
  [const ::= (*) STRING , {COMMA RPAREN }]
  [value_list ::= (*) const , {RPAREN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA RPAREN }]
  [const ::= (*) TIME TIMEVAL , {COMMA RPAREN }]
  [const ::= (*) DOUBLEVAL , {COMMA RPAREN }]
  [const ::= (*) FALSE , {COMMA RPAREN }]
  [const ::= (*) INTVAL , {COMMA RPAREN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA RPAREN }]
}
transition on TIMEVAL to state [40]
transition on TIMESTAMP to state [39]
transition on value_list to state [269]
transition on UNKNOWN to state [38]
transition on DOUBLEVAL to state [37]
transition on FALSE to state [36]
transition on INTVAL to state [35]
transition on STRING to state [34]
transition on TIMESTAMPVAL to state [33]
transition on DATEVAL to state [32]
transition on NULL to state [31]
transition on TRUE to state [30]
transition on const to state [263]
transition on DATE to state [28]
transition on TIME to state [27]

-------------------
lalr_state [269]: {
  [value_list ::= const COMMA value_list (*) , {RPAREN }]
}

-------------------
lalr_state [270]: {
  [insert ::= INSERT INTO ID VALUES values_part (*) , {SEMICOLON }]
}

-------------------
lalr_state [271]: {
  [stm ::= CREATE INDEX (*) ID ON ID LPAREN id_list RPAREN , {SEMICOLON }]
}
transition on ID to state [288]

-------------------
lalr_state [272]: {
  [stm ::= CREATE DATABASE (*) ID , {SEMICOLON }]
}
transition on ID to state [287]

-------------------
lalr_state [273]: {
  [stm ::= CREATE TABLE (*) ID LPAREN attr_list RPAREN , {SEMICOLON }]
}
transition on ID to state [283]

-------------------
lalr_state [274]: {
  [create_view ::= CREATE VIEW (*) ID LPAREN id_list RPAREN AS query , {SEMICOLON }]
  [create_view ::= CREATE VIEW (*) ID AS query , {SEMICOLON }]
}
transition on ID to state [275]

-------------------
lalr_state [275]: {
  [create_view ::= CREATE VIEW ID (*) LPAREN id_list RPAREN AS query , {SEMICOLON }]
  [create_view ::= CREATE VIEW ID (*) AS query , {SEMICOLON }]
}
transition on LPAREN to state [277]
transition on AS to state [276]

-------------------
lalr_state [276]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [create_view ::= CREATE VIEW ID AS (*) query , {SEMICOLON }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [282]

-------------------
lalr_state [277]: {
  [lvalue ::= (*) ID DOT ID , {COMMA RPAREN }]
  [create_view ::= CREATE VIEW ID LPAREN (*) id_list RPAREN AS query , {SEMICOLON }]
  [id_list ::= (*) lvalue , {RPAREN }]
  [lvalue ::= (*) ID , {COMMA RPAREN }]
  [id_list ::= (*) lvalue COMMA id_list , {RPAREN }]
}
transition on id_list to state [278]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [278]: {
  [create_view ::= CREATE VIEW ID LPAREN id_list (*) RPAREN AS query , {SEMICOLON }]
}
transition on RPAREN to state [279]

-------------------
lalr_state [279]: {
  [create_view ::= CREATE VIEW ID LPAREN id_list RPAREN (*) AS query , {SEMICOLON }]
}
transition on AS to state [280]

-------------------
lalr_state [280]: {
  [query ::= (*) query EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [create_view ::= CREATE VIEW ID LPAREN id_list RPAREN AS (*) query , {SEMICOLON }]
  [query ::= (*) query INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {SEMICOLON UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [281]

-------------------
lalr_state [281]: {
  [query ::= query (*) UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [create_view ::= CREATE VIEW ID LPAREN id_list RPAREN AS query (*) , {SEMICOLON }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [282]: {
  [query ::= query (*) UNION query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [create_view ::= CREATE VIEW ID AS query (*) , {SEMICOLON }]
  [query ::= query (*) EXCEPT query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT ALL query , {SEMICOLON UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on EXCEPT to state [86]

-------------------
lalr_state [283]: {
  [stm ::= CREATE TABLE ID (*) LPAREN attr_list RPAREN , {SEMICOLON }]
}
transition on LPAREN to state [284]

-------------------
lalr_state [284]: {
  [attr ::= (*) ID type PRIMARY KEY , {COMMA RPAREN }]
  [attr ::= (*) ID type , {COMMA RPAREN }]
  [attr ::= (*) PRIMARY KEY LPAREN id_list RPAREN , {COMMA RPAREN }]
  [attr ::= (*) ID type DEFAULT const , {COMMA RPAREN }]
  [attr_list ::= (*) attr COMMA attr_list , {RPAREN }]
  [attr ::= (*) ID type UNIQUE , {COMMA RPAREN }]
  [attr ::= (*) ID type NOT NULL , {COMMA RPAREN }]
  [stm ::= CREATE TABLE ID LPAREN (*) attr_list RPAREN , {SEMICOLON }]
  [attr_list ::= (*) attr , {RPAREN }]
}
transition on PRIMARY to state [214]
transition on attr_list to state [285]
transition on ID to state [213]
transition on attr to state [216]

-------------------
lalr_state [285]: {
  [stm ::= CREATE TABLE ID LPAREN attr_list (*) RPAREN , {SEMICOLON }]
}
transition on RPAREN to state [286]

-------------------
lalr_state [286]: {
  [stm ::= CREATE TABLE ID LPAREN attr_list RPAREN (*) , {SEMICOLON }]
}

-------------------
lalr_state [287]: {
  [stm ::= CREATE DATABASE ID (*) , {SEMICOLON }]
}

-------------------
lalr_state [288]: {
  [stm ::= CREATE INDEX ID (*) ON ID LPAREN id_list RPAREN , {SEMICOLON }]
}
transition on ON to state [289]

-------------------
lalr_state [289]: {
  [stm ::= CREATE INDEX ID ON (*) ID LPAREN id_list RPAREN , {SEMICOLON }]
}
transition on ID to state [290]

-------------------
lalr_state [290]: {
  [stm ::= CREATE INDEX ID ON ID (*) LPAREN id_list RPAREN , {SEMICOLON }]
}
transition on LPAREN to state [291]

-------------------
lalr_state [291]: {
  [stm ::= CREATE INDEX ID ON ID LPAREN (*) id_list RPAREN , {SEMICOLON }]
  [lvalue ::= (*) ID DOT ID , {COMMA RPAREN }]
  [id_list ::= (*) lvalue , {RPAREN }]
  [lvalue ::= (*) ID , {COMMA RPAREN }]
  [id_list ::= (*) lvalue COMMA id_list , {RPAREN }]
}
transition on id_list to state [292]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [292]: {
  [stm ::= CREATE INDEX ID ON ID LPAREN id_list (*) RPAREN , {SEMICOLON }]
}
transition on RPAREN to state [293]

-------------------
lalr_state [293]: {
  [stm ::= CREATE INDEX ID ON ID LPAREN id_list RPAREN (*) , {SEMICOLON }]
}

-------------------
lalr_state [294]: {
  [stm ::= SHOW TABLE (*) , {SEMICOLON }]
}

-------------------
lalr_state [295]: {
  [stm ::= SHOW VIEW (*) , {SEMICOLON }]
}

-------------------
lalr_state [296]: {
  [field_list ::= (*) field , {FROM }]
  [const ::= (*) TIMEVAL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [const ::= (*) STRING , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [query ::= SELECT distinct_part (*) field_list FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp DIVIDE exp , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [const ::= (*) DOUBLEVAL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [query ::= SELECT distinct_part (*) field_list FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [exp ::= (*) const , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [field_list ::= (*) field COMMA field_list , {FROM }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [const ::= (*) TRUE , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [query ::= SELECT distinct_part (*) field_list FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp OROR exp , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [const ::= (*) DATE DATEVAL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [lvalue ::= (*) ID , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [exp ::= (*) exp PLUS exp , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [field_list ::= (*) LPAREN field_list RPAREN , {FROM }]
  [const ::= (*) TIMESTAMPVAL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [const ::= (*) FALSE , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [query ::= SELECT distinct_part (*) field_list FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [exp ::= (*) lvalue , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [const ::= (*) DATEVAL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [lvalue ::= (*) ID DOT ID , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [exp ::= (*) exp MINUS exp , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [field ::= (*) exp , {COMMA FROM }]
  [const ::= (*) NULL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [query ::= SELECT distinct_part (*) field_list FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [exp ::= (*) STAR , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [const ::= (*) TIME TIMEVAL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [const ::= (*) INTVAL , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [exp ::= (*) exp STAR exp , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [field ::= (*) exp AS ID , {COMMA FROM }]
  [const ::= (*) UNKNOWN , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [query ::= SELECT distinct_part (*) field_list FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
  [exp ::= (*) function , {COMMA STAR PLUS MINUS DIVIDE OROR FROM AS }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [297]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [173]
transition on TRUE to state [30]
transition on exp to state [172]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [297]: {
  [query ::= SELECT distinct_part field_list (*) FROM tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list (*) FROM ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list (*) FROM ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list (*) FROM ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list (*) FROM ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list (*) FROM ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on FROM to state [298]

-------------------
lalr_state [298]: {
  [table ::= (*) ID AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [tables ::= (*) table COMMA tables , {SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= SELECT distinct_part field_list FROM (*) ID NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM (*) ID NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [table ::= (*) LPAREN query RPAREN AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= (*) ID ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [tables ::= (*) table , {SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= SELECT distinct_part field_list FROM (*) ID CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM (*) tables where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [table ::= (*) LPAREN query RPAREN ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= (*) ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= SELECT distinct_part field_list FROM (*) ID NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM (*) ID FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on LPAREN to state [302]
transition on table to state [301]
transition on tables to state [300]
transition on ID to state [299]

-------------------
lalr_state [299]: {
  [query ::= SELECT distinct_part field_list FROM ID (*) NATURAL RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM ID (*) FULL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [table ::= ID (*) , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= SELECT distinct_part field_list FROM ID (*) NATURAL LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM ID (*) NATURAL JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [table ::= ID (*) AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= SELECT distinct_part field_list FROM ID (*) CROSS JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [table ::= ID (*) ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on NATURAL to state [336]
transition on CROSS to state [335]
transition on FULL to state [334]
transition on AS to state [312]
transition on ID to state [311]

-------------------
lalr_state [300]: {
  [where_part ::= (*) WHERE conditions , {SEMICOLON RPAREN GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [empty ::= (*) , {SEMICOLON RPAREN GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [where_part ::= (*) empty , {SEMICOLON RPAREN GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= SELECT distinct_part field_list FROM tables (*) where_part group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on empty to state [44]
transition on where_part to state [314]
transition on WHERE to state [42]

-------------------
lalr_state [301]: {
  [tables ::= table (*) , {SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [tables ::= table (*) COMMA tables , {SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on COMMA to state [308]

-------------------
lalr_state [302]: {
  [query ::= (*) query EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID FULL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) LPAREN query RPAREN , {RPAREN UNION INTERSECT EXCEPT }]
  [table ::= LPAREN (*) query RPAREN AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= (*) query EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [table ::= LPAREN (*) query RPAREN ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= (*) query INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) query UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= (*) SELECT distinct_part field_list FROM tables where_part group_part having_part order_part , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on SELECT to state [3]
transition on LPAREN to state [7]
transition on query to state [303]

-------------------
lalr_state [303]: {
  [query ::= query (*) UNION query , {RPAREN UNION INTERSECT EXCEPT }]
  [table ::= LPAREN query (*) RPAREN ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= query (*) EXCEPT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) INTERSECT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) EXCEPT query , {RPAREN UNION INTERSECT EXCEPT }]
  [query ::= query (*) UNION ALL query , {RPAREN UNION INTERSECT EXCEPT }]
  [table ::= LPAREN query (*) RPAREN AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= query (*) INTERSECT ALL query , {RPAREN UNION INTERSECT EXCEPT }]
}
transition on UNION to state [88]
transition on INTERSECT to state [87]
transition on RPAREN to state [304]
transition on EXCEPT to state [86]

-------------------
lalr_state [304]: {
  [table ::= LPAREN query RPAREN (*) ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= LPAREN query RPAREN (*) AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on AS to state [306]
transition on ID to state [305]

-------------------
lalr_state [305]: {
  [table ::= LPAREN query RPAREN ID (*) , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [306]: {
  [table ::= LPAREN query RPAREN AS (*) ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on ID to state [307]

-------------------
lalr_state [307]: {
  [table ::= LPAREN query RPAREN AS ID (*) , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [308]: {
  [table ::= (*) ID ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [tables ::= (*) table , {SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= (*) LPAREN query RPAREN ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= (*) ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [tables ::= table COMMA (*) tables , {SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= (*) ID AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [tables ::= (*) table COMMA tables , {SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= (*) LPAREN query RPAREN AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on LPAREN to state [302]
transition on table to state [301]
transition on tables to state [310]
transition on ID to state [309]

-------------------
lalr_state [309]: {
  [table ::= ID (*) , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= ID (*) AS ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
  [table ::= ID (*) ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on AS to state [312]
transition on ID to state [311]

-------------------
lalr_state [310]: {
  [tables ::= table COMMA tables (*) , {SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [311]: {
  [table ::= ID ID (*) , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [312]: {
  [table ::= ID AS (*) ID , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on ID to state [313]

-------------------
lalr_state [313]: {
  [table ::= ID AS ID (*) , {COMMA SEMICOLON RPAREN WHERE GROUP ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [314]: {
  [empty ::= (*) , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [group_part ::= (*) GROUP BY id_list , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [query ::= SELECT distinct_part field_list FROM tables where_part (*) group_part having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [group_part ::= (*) empty , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on group_part to state [317]
transition on GROUP to state [316]
transition on empty to state [315]

-------------------
lalr_state [315]: {
  [group_part ::= empty (*) , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [316]: {
  [group_part ::= GROUP (*) BY id_list , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on BY to state [332]

-------------------
lalr_state [317]: {
  [having_part ::= (*) empty , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT }]
  [empty ::= (*) , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM tables where_part group_part (*) having_part order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [having_part ::= (*) HAVING conditions , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT }]
}
transition on having_part to state [320]
transition on empty to state [319]
transition on HAVING to state [318]

-------------------
lalr_state [318]: {
  [field_list ::= (*) field , {NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [condition ::= (*) exp compare_op exp , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) conditions OR conditions , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [field_list ::= (*) field COMMA field_list , {NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp BETWEEN exp AND exp , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) conditions OROR conditions , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [field_list ::= (*) LPAREN field_list RPAREN , {NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [const ::= (*) DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) NOT conditions , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [field ::= (*) exp , {COMMA NOT IN }]
  [const ::= (*) NULL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [having_part ::= HAVING (*) conditions , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT }]
  [conditions ::= (*) condition , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NULL , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [field ::= (*) exp AS ID , {COMMA NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) function , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) conditions AND conditions , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [58]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [53]
transition on TRUE to state [30]
transition on exp to state [52]
transition on conditions to state [331]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [319]: {
  [having_part ::= empty (*) , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [320]: {
  [order_part ::= (*) ORDER BY order_list , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [empty ::= (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [order_part ::= (*) empty , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM tables where_part group_part having_part (*) order_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on empty to state [323]
transition on order_part to state [322]
transition on ORDER to state [321]

-------------------
lalr_state [321]: {
  [order_part ::= ORDER (*) BY order_list , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on BY to state [324]

-------------------
lalr_state [322]: {
  [query ::= SELECT distinct_part field_list FROM tables where_part group_part having_part order_part (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [323]: {
  [order_part ::= empty (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [324]: {
  [order_list ::= (*) order , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) NULL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) TIME TIMEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp PLUS exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [order ::= (*) exp DESC , {COMMA SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) TRUE , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) DATE DATEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) function , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp DIVIDE exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [order_list ::= (*) order COMMA order_list , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) INTVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) UNKNOWN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) TIMEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) lvalue , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp MINUS exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) FALSE , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) DATEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) const , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp OROR exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [order_part ::= ORDER BY (*) order_list , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [order ::= (*) exp , {COMMA SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) STRING , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) DOUBLEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) STAR , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp STAR exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on order to state [327]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on order_list to state [326]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [325]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [325]: {
  [exp ::= exp (*) STAR exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [order ::= exp (*) , {COMMA SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= exp (*) OROR exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= exp (*) MINUS exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= exp (*) DIVIDE exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [order ::= exp (*) DESC , {COMMA SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [exp ::= exp (*) PLUS exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
}
transition on DIVIDE to state [73]
transition on MINUS to state [72]
transition on OROR to state [71]
transition on PLUS to state [70]
transition on DESC to state [330]
transition on STAR to state [68]

-------------------
lalr_state [326]: {
  [order_part ::= ORDER BY order_list (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [327]: {
  [order_list ::= order (*) COMMA order_list , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [order_list ::= order (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on COMMA to state [328]

-------------------
lalr_state [328]: {
  [order_list ::= (*) order , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) NULL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) TIME TIMEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp PLUS exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [order ::= (*) exp DESC , {COMMA SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) TRUE , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) DATE DATEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) function , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp DIVIDE exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [order_list ::= order COMMA (*) order_list , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [order_list ::= (*) order COMMA order_list , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) INTVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) UNKNOWN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) TIMEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) lvalue , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp MINUS exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) FALSE , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) DATEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) const , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp OROR exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [order ::= (*) exp , {COMMA SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [const ::= (*) STRING , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) DOUBLEVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) STAR , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [exp ::= (*) exp STAR exp , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA SEMICOLON RPAREN STAR PLUS MINUS DIVIDE OROR DESC UNION INTERSECT EXCEPT }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on NULL to state [31]
transition on TIMESTAMPVAL to state [33]
transition on MAX to state [57]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MIN to state [56]
transition on order to state [327]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on order_list to state [329]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [66]
transition on exp to state [325]
transition on TRUE to state [30]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]

-------------------
lalr_state [329]: {
  [order_list ::= order COMMA order_list (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [330]: {
  [order ::= exp DESC (*) , {COMMA SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [331]: {
  [conditions ::= conditions (*) AND conditions , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= conditions (*) OROR conditions , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
  [having_part ::= HAVING conditions (*) , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT }]
  [conditions ::= conditions (*) OR conditions , {SEMICOLON RPAREN OROR ORDER UNION INTERSECT EXCEPT AND OR }]
}
transition on OR to state [161]
transition on OROR to state [160]
transition on AND to state [159]

-------------------
lalr_state [332]: {
  [lvalue ::= (*) ID DOT ID , {COMMA SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [id_list ::= (*) lvalue , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [group_part ::= GROUP BY (*) id_list , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [lvalue ::= (*) ID , {COMMA SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
  [id_list ::= (*) lvalue COMMA id_list , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
}
transition on id_list to state [333]
transition on ID to state [24]
transition on lvalue to state [198]

-------------------
lalr_state [333]: {
  [group_part ::= GROUP BY id_list (*) , {SEMICOLON RPAREN ORDER UNION INTERSECT EXCEPT HAVING }]
}

-------------------
lalr_state [334]: {
  [query ::= SELECT distinct_part field_list FROM ID FULL (*) JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on JOIN to state [354]

-------------------
lalr_state [335]: {
  [query ::= SELECT distinct_part field_list FROM ID CROSS (*) JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on JOIN to state [351]

-------------------
lalr_state [336]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL (*) LEFT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM ID NATURAL (*) JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM ID NATURAL (*) RIGHT JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on RIGHT to state [339]
transition on LEFT to state [338]
transition on JOIN to state [337]

-------------------
lalr_state [337]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL JOIN (*) ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on ID to state [349]

-------------------
lalr_state [338]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL LEFT (*) JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on JOIN to state [346]

-------------------
lalr_state [339]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL RIGHT (*) JOIN ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on JOIN to state [340]

-------------------
lalr_state [340]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN (*) ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on ID to state [341]

-------------------
lalr_state [341]: {
  [on_part ::= (*) ON conditions , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [empty ::= (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [on_part ::= (*) empty , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID (*) on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on on_part to state [344]
transition on empty to state [343]
transition on ON to state [342]

-------------------
lalr_state [342]: {
  [field_list ::= (*) field , {NOT IN }]
  [const ::= (*) TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) STRING , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp DIVIDE exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NOT NULL , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [condition ::= (*) exp compare_op exp , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [const ::= (*) DOUBLEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) COUNT LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) const , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ALL LPAREN query RPAREN , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) conditions OR conditions , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [field_list ::= (*) field COMMA field_list , {NOT IN }]
  [const ::= (*) TIMESTAMP TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) TRUE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp OROR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp BETWEEN exp AND exp , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [condition ::= (*) exp compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [const ::= (*) DATE DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MIN LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp PLUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) conditions OROR conditions , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [field_list ::= (*) LPAREN field_list RPAREN , {NOT IN }]
  [const ::= (*) TIMESTAMPVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) FALSE , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) LPAREN exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) lvalue , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op exp , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [const ::= (*) DATEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [lvalue ::= (*) ID DOT ID , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) MAX LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp MINUS exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) field_list NOT IN LPAREN query RPAREN , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [on_part ::= ON (*) conditions , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [conditions ::= (*) NOT conditions , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [field ::= (*) exp , {COMMA NOT IN }]
  [const ::= (*) NULL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) AVG LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) STAR , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) LPAREN query RPAREN compare_op LPAREN query RPAREN , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) condition , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [const ::= (*) TIME TIMEVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [const ::= (*) INTVAL , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) exp STAR exp , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp IS NULL , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) LPAREN conditions RPAREN , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [field ::= (*) exp AS ID , {COMMA NOT IN }]
  [const ::= (*) UNKNOWN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [function ::= (*) SUM LPAREN distinct_part exp RPAREN , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [exp ::= (*) function , {COMMA STAR EQ NEQ LT LE GT GE PLUS MINUS DIVIDE OROR BETWEEN NOT IN AS IS }]
  [condition ::= (*) exp compare_op ANY LPAREN query RPAREN , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= (*) conditions AND conditions , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
}
transition on UNKNOWN to state [38]
transition on lvalue to state [60]
transition on COUNT to state [59]
transition on TIMESTAMPVAL to state [33]
transition on NULL to state [31]
transition on field_list to state [58]
transition on DOUBLEVAL to state [37]
transition on TIMESTAMP to state [39]
transition on MAX to state [57]
transition on MIN to state [56]
transition on condition to state [55]
transition on AVG to state [54]
transition on FALSE to state [36]
transition on TIME to state [27]
transition on DATEVAL to state [32]
transition on STRING to state [34]
transition on INTVAL to state [35]
transition on ID to state [24]
transition on LPAREN to state [53]
transition on TRUE to state [30]
transition on exp to state [52]
transition on conditions to state [345]
transition on function to state [50]
transition on TIMEVAL to state [40]
transition on NOT to state [49]
transition on DATE to state [28]
transition on STAR to state [48]
transition on SUM to state [47]
transition on const to state [46]
transition on field to state [45]

-------------------
lalr_state [343]: {
  [on_part ::= empty (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [344]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL RIGHT JOIN ID on_part (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [345]: {
  [conditions ::= conditions (*) AND conditions , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [on_part ::= ON conditions (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [conditions ::= conditions (*) OROR conditions , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
  [conditions ::= conditions (*) OR conditions , {SEMICOLON RPAREN OROR UNION INTERSECT EXCEPT AND OR }]
}
transition on OR to state [161]
transition on OROR to state [160]
transition on AND to state [159]

-------------------
lalr_state [346]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN (*) ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on ID to state [347]

-------------------
lalr_state [347]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID (*) on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [on_part ::= (*) ON conditions , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [empty ::= (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [on_part ::= (*) empty , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on on_part to state [348]
transition on empty to state [343]
transition on ON to state [342]

-------------------
lalr_state [348]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL LEFT JOIN ID on_part (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [349]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL JOIN ID (*) on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [on_part ::= (*) ON conditions , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [empty ::= (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [on_part ::= (*) empty , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on on_part to state [350]
transition on empty to state [343]
transition on ON to state [342]

-------------------
lalr_state [350]: {
  [query ::= SELECT distinct_part field_list FROM ID NATURAL JOIN ID on_part (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [351]: {
  [query ::= SELECT distinct_part field_list FROM ID CROSS JOIN (*) ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on ID to state [352]

-------------------
lalr_state [352]: {
  [on_part ::= (*) ON conditions , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [empty ::= (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM ID CROSS JOIN ID (*) on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [on_part ::= (*) empty , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on on_part to state [353]
transition on empty to state [343]
transition on ON to state [342]

-------------------
lalr_state [353]: {
  [query ::= SELECT distinct_part field_list FROM ID CROSS JOIN ID on_part (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
lalr_state [354]: {
  [query ::= SELECT distinct_part field_list FROM ID FULL JOIN (*) ID on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on ID to state [355]

-------------------
lalr_state [355]: {
  [on_part ::= (*) ON conditions , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [empty ::= (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [on_part ::= (*) empty , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
  [query ::= SELECT distinct_part field_list FROM ID FULL JOIN ID (*) on_part , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}
transition on on_part to state [356]
transition on empty to state [343]
transition on ON to state [342]

-------------------
lalr_state [356]: {
  [query ::= SELECT distinct_part field_list FROM ID FULL JOIN ID on_part (*) , {SEMICOLON RPAREN UNION INTERSECT EXCEPT }]
}

-------------------
